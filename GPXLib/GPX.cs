//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.1432.
// 


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[global::System.Serializable()]
[global::System.ComponentModel.DesignerCategoryAttribute("code")]
[global::System.ComponentModel.ToolboxItem(true)]
[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[global::System.Xml.Serialization.XmlRootAttribute("GPXDataSet")]
[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class GPXDataSet : global::System.Data.DataSet {
    
    private gpxDataTable tablegpx;
    
    private metadataDataTable tablemetadata;
    
    private authorDataTable tableauthor;
    
    private emailDataTable tableemail;
    
    private linkDataTable tablelink;
    
    private copyrightDataTable tablecopyright;
    
    private boundsDataTable tablebounds;
    
    private extensionsDataTable tableextensions;
    
    private wptDataTable tablewpt;
    
    private rteDataTable tablerte;
    
    private rteptDataTable tablertept;
    
    private trkDataTable tabletrk;
    
    private trksegDataTable tabletrkseg;
    
    private trkptDataTable tabletrkpt;
    
    private global::System.Data.DataRelation relationgpx_metadata;
    
    private global::System.Data.DataRelation relationmetadata_author;
    
    private global::System.Data.DataRelation relationauthor_email;
    
    private global::System.Data.DataRelation relationauthor_link;
    
    private global::System.Data.DataRelation relationmetadata_link;
    
    private global::System.Data.DataRelation relationwpt_link;
    
    private global::System.Data.DataRelation relationrtept_link;
    
    private global::System.Data.DataRelation relationrte_link;
    
    private global::System.Data.DataRelation relationtrkpt_link;
    
    private global::System.Data.DataRelation relationtrk_link;
    
    private global::System.Data.DataRelation relationmetadata_copyright;
    
    private global::System.Data.DataRelation relationmetadata_bounds;
    
    private global::System.Data.DataRelation relationmetadata_extensions;
    
    private global::System.Data.DataRelation relationwpt_extensions;
    
    private global::System.Data.DataRelation relationrtept_extensions;
    
    private global::System.Data.DataRelation relationrte_extensions;
    
    private global::System.Data.DataRelation relationtrkpt_extensions;
    
    private global::System.Data.DataRelation relationtrkseg_extensions;
    
    private global::System.Data.DataRelation relationtrk_extensions;
    
    private global::System.Data.DataRelation relationgpx_extensions;
    
    private global::System.Data.DataRelation relationgpx_wpt;
    
    private global::System.Data.DataRelation relationgpx_rte;
    
    private global::System.Data.DataRelation relationrte_rtept;
    
    private global::System.Data.DataRelation relationgpx_trk;
    
    private global::System.Data.DataRelation relationtrk_trkseg;
    
    private global::System.Data.DataRelation relationtrkseg_trkpt;
    
    private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public GPXDataSet() {
        this.BeginInit();
        this.InitClass();
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected GPXDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
            base(info, context, false) {
        if ((this.IsBinarySerialized(info, context) == true)) {
            this.InitVars(false);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            if ((ds.Tables["gpx"] != null)) {
                base.Tables.Add(new gpxDataTable(ds.Tables["gpx"]));
            }
            if ((ds.Tables["metadata"] != null)) {
                base.Tables.Add(new metadataDataTable(ds.Tables["metadata"]));
            }
            if ((ds.Tables["author"] != null)) {
                base.Tables.Add(new authorDataTable(ds.Tables["author"]));
            }
            if ((ds.Tables["email"] != null)) {
                base.Tables.Add(new emailDataTable(ds.Tables["email"]));
            }
            if ((ds.Tables["link"] != null)) {
                base.Tables.Add(new linkDataTable(ds.Tables["link"]));
            }
            if ((ds.Tables["copyright"] != null)) {
                base.Tables.Add(new copyrightDataTable(ds.Tables["copyright"]));
            }
            if ((ds.Tables["bounds"] != null)) {
                base.Tables.Add(new boundsDataTable(ds.Tables["bounds"]));
            }
            if ((ds.Tables["extensions"] != null)) {
                base.Tables.Add(new extensionsDataTable(ds.Tables["extensions"]));
            }
            if ((ds.Tables["wpt"] != null)) {
                base.Tables.Add(new wptDataTable(ds.Tables["wpt"]));
            }
            if ((ds.Tables["rte"] != null)) {
                base.Tables.Add(new rteDataTable(ds.Tables["rte"]));
            }
            if ((ds.Tables["rtept"] != null)) {
                base.Tables.Add(new rteptDataTable(ds.Tables["rtept"]));
            }
            if ((ds.Tables["trk"] != null)) {
                base.Tables.Add(new trkDataTable(ds.Tables["trk"]));
            }
            if ((ds.Tables["trkseg"] != null)) {
                base.Tables.Add(new trksegDataTable(ds.Tables["trkseg"]));
            }
            if ((ds.Tables["trkpt"] != null)) {
                base.Tables.Add(new trkptDataTable(ds.Tables["trkpt"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public gpxDataTable gpx {
        get {
            return this.tablegpx;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public metadataDataTable metadata {
        get {
            return this.tablemetadata;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public authorDataTable author {
        get {
            return this.tableauthor;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public emailDataTable email {
        get {
            return this.tableemail;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public linkDataTable link {
        get {
            return this.tablelink;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public copyrightDataTable copyright {
        get {
            return this.tablecopyright;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public boundsDataTable bounds {
        get {
            return this.tablebounds;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public extensionsDataTable extensions {
        get {
            return this.tableextensions;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public wptDataTable wpt {
        get {
            return this.tablewpt;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public rteDataTable rte {
        get {
            return this.tablerte;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public rteptDataTable rtept {
        get {
            return this.tablertept;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public trkDataTable trk {
        get {
            return this.tabletrk;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public trksegDataTable trkseg {
        get {
            return this.tabletrkseg;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public trkptDataTable trkpt {
        get {
            return this.tabletrkpt;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.BrowsableAttribute(true)]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
        get {
            return this._schemaSerializationMode;
        }
        set {
            this._schemaSerializationMode = value;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataTableCollection Tables {
        get {
            return base.Tables;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataRelationCollection Relations {
        get {
            return base.Relations;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void InitializeDerivedDataSet() {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public override global::System.Data.DataSet Clone() {
        GPXDataSet cln = ((GPXDataSet)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
        if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            this.Reset();
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["gpx"] != null)) {
                base.Tables.Add(new gpxDataTable(ds.Tables["gpx"]));
            }
            if ((ds.Tables["metadata"] != null)) {
                base.Tables.Add(new metadataDataTable(ds.Tables["metadata"]));
            }
            if ((ds.Tables["author"] != null)) {
                base.Tables.Add(new authorDataTable(ds.Tables["author"]));
            }
            if ((ds.Tables["email"] != null)) {
                base.Tables.Add(new emailDataTable(ds.Tables["email"]));
            }
            if ((ds.Tables["link"] != null)) {
                base.Tables.Add(new linkDataTable(ds.Tables["link"]));
            }
            if ((ds.Tables["copyright"] != null)) {
                base.Tables.Add(new copyrightDataTable(ds.Tables["copyright"]));
            }
            if ((ds.Tables["bounds"] != null)) {
                base.Tables.Add(new boundsDataTable(ds.Tables["bounds"]));
            }
            if ((ds.Tables["extensions"] != null)) {
                base.Tables.Add(new extensionsDataTable(ds.Tables["extensions"]));
            }
            if ((ds.Tables["wpt"] != null)) {
                base.Tables.Add(new wptDataTable(ds.Tables["wpt"]));
            }
            if ((ds.Tables["rte"] != null)) {
                base.Tables.Add(new rteDataTable(ds.Tables["rte"]));
            }
            if ((ds.Tables["rtept"] != null)) {
                base.Tables.Add(new rteptDataTable(ds.Tables["rtept"]));
            }
            if ((ds.Tables["trk"] != null)) {
                base.Tables.Add(new trkDataTable(ds.Tables["trk"]));
            }
            if ((ds.Tables["trkseg"] != null)) {
                base.Tables.Add(new trksegDataTable(ds.Tables["trkseg"]));
            }
            if ((ds.Tables["trkpt"] != null)) {
                base.Tables.Add(new trkptDataTable(ds.Tables["trkpt"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
        this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars() {
        this.InitVars(true);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars(bool initTable) {
        this.tablegpx = ((gpxDataTable)(base.Tables["gpx"]));
        if ((initTable == true)) {
            if ((this.tablegpx != null)) {
                this.tablegpx.InitVars();
            }
        }
        this.tablemetadata = ((metadataDataTable)(base.Tables["metadata"]));
        if ((initTable == true)) {
            if ((this.tablemetadata != null)) {
                this.tablemetadata.InitVars();
            }
        }
        this.tableauthor = ((authorDataTable)(base.Tables["author"]));
        if ((initTable == true)) {
            if ((this.tableauthor != null)) {
                this.tableauthor.InitVars();
            }
        }
        this.tableemail = ((emailDataTable)(base.Tables["email"]));
        if ((initTable == true)) {
            if ((this.tableemail != null)) {
                this.tableemail.InitVars();
            }
        }
        this.tablelink = ((linkDataTable)(base.Tables["link"]));
        if ((initTable == true)) {
            if ((this.tablelink != null)) {
                this.tablelink.InitVars();
            }
        }
        this.tablecopyright = ((copyrightDataTable)(base.Tables["copyright"]));
        if ((initTable == true)) {
            if ((this.tablecopyright != null)) {
                this.tablecopyright.InitVars();
            }
        }
        this.tablebounds = ((boundsDataTable)(base.Tables["bounds"]));
        if ((initTable == true)) {
            if ((this.tablebounds != null)) {
                this.tablebounds.InitVars();
            }
        }
        this.tableextensions = ((extensionsDataTable)(base.Tables["extensions"]));
        if ((initTable == true)) {
            if ((this.tableextensions != null)) {
                this.tableextensions.InitVars();
            }
        }
        this.tablewpt = ((wptDataTable)(base.Tables["wpt"]));
        if ((initTable == true)) {
            if ((this.tablewpt != null)) {
                this.tablewpt.InitVars();
            }
        }
        this.tablerte = ((rteDataTable)(base.Tables["rte"]));
        if ((initTable == true)) {
            if ((this.tablerte != null)) {
                this.tablerte.InitVars();
            }
        }
        this.tablertept = ((rteptDataTable)(base.Tables["rtept"]));
        if ((initTable == true)) {
            if ((this.tablertept != null)) {
                this.tablertept.InitVars();
            }
        }
        this.tabletrk = ((trkDataTable)(base.Tables["trk"]));
        if ((initTable == true)) {
            if ((this.tabletrk != null)) {
                this.tabletrk.InitVars();
            }
        }
        this.tabletrkseg = ((trksegDataTable)(base.Tables["trkseg"]));
        if ((initTable == true)) {
            if ((this.tabletrkseg != null)) {
                this.tabletrkseg.InitVars();
            }
        }
        this.tabletrkpt = ((trkptDataTable)(base.Tables["trkpt"]));
        if ((initTable == true)) {
            if ((this.tabletrkpt != null)) {
                this.tabletrkpt.InitVars();
            }
        }
        this.relationgpx_metadata = this.Relations["gpx_metadata"];
        this.relationmetadata_author = this.Relations["metadata_author"];
        this.relationauthor_email = this.Relations["author_email"];
        this.relationauthor_link = this.Relations["author_link"];
        this.relationmetadata_link = this.Relations["metadata_link"];
        this.relationwpt_link = this.Relations["wpt_link"];
        this.relationrtept_link = this.Relations["rtept_link"];
        this.relationrte_link = this.Relations["rte_link"];
        this.relationtrkpt_link = this.Relations["trkpt_link"];
        this.relationtrk_link = this.Relations["trk_link"];
        this.relationmetadata_copyright = this.Relations["metadata_copyright"];
        this.relationmetadata_bounds = this.Relations["metadata_bounds"];
        this.relationmetadata_extensions = this.Relations["metadata_extensions"];
        this.relationwpt_extensions = this.Relations["wpt_extensions"];
        this.relationrtept_extensions = this.Relations["rtept_extensions"];
        this.relationrte_extensions = this.Relations["rte_extensions"];
        this.relationtrkpt_extensions = this.Relations["trkpt_extensions"];
        this.relationtrkseg_extensions = this.Relations["trkseg_extensions"];
        this.relationtrk_extensions = this.Relations["trk_extensions"];
        this.relationgpx_extensions = this.Relations["gpx_extensions"];
        this.relationgpx_wpt = this.Relations["gpx_wpt"];
        this.relationgpx_rte = this.Relations["gpx_rte"];
        this.relationrte_rtept = this.Relations["rte_rtept"];
        this.relationgpx_trk = this.Relations["gpx_trk"];
        this.relationtrk_trkseg = this.Relations["trk_trkseg"];
        this.relationtrkseg_trkpt = this.Relations["trkseg_trkpt"];
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void InitClass() {
        this.DataSetName = "GPXDataSet";
        this.Prefix = "";
        this.Namespace = "http://www.topografix.com/GPX/1/1";
        this.Locale = new global::System.Globalization.CultureInfo("");
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        this.tablegpx = new gpxDataTable();
        base.Tables.Add(this.tablegpx);
        this.tablemetadata = new metadataDataTable();
        base.Tables.Add(this.tablemetadata);
        this.tableauthor = new authorDataTable();
        base.Tables.Add(this.tableauthor);
        this.tableemail = new emailDataTable();
        base.Tables.Add(this.tableemail);
        this.tablelink = new linkDataTable();
        base.Tables.Add(this.tablelink);
        this.tablecopyright = new copyrightDataTable();
        base.Tables.Add(this.tablecopyright);
        this.tablebounds = new boundsDataTable();
        base.Tables.Add(this.tablebounds);
        this.tableextensions = new extensionsDataTable();
        base.Tables.Add(this.tableextensions);
        this.tablewpt = new wptDataTable();
        base.Tables.Add(this.tablewpt);
        this.tablerte = new rteDataTable();
        base.Tables.Add(this.tablerte);
        this.tablertept = new rteptDataTable();
        base.Tables.Add(this.tablertept);
        this.tabletrk = new trkDataTable();
        base.Tables.Add(this.tabletrk);
        this.tabletrkseg = new trksegDataTable();
        base.Tables.Add(this.tabletrkseg);
        this.tabletrkpt = new trkptDataTable();
        base.Tables.Add(this.tabletrkpt);
        global::System.Data.ForeignKeyConstraint fkc;
        fkc = new global::System.Data.ForeignKeyConstraint("gpx_metadata", new global::System.Data.DataColumn[] {
                    this.tablegpx.gpx_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablemetadata.gpx_IdColumn});
        this.tablemetadata.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("metadata_author", new global::System.Data.DataColumn[] {
                    this.tablemetadata.metadata_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableauthor.metadata_IdColumn});
        this.tableauthor.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("author_email", new global::System.Data.DataColumn[] {
                    this.tableauthor.author_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableemail.author_IdColumn});
        this.tableemail.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("author_link", new global::System.Data.DataColumn[] {
                    this.tableauthor.author_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablelink.author_IdColumn});
        this.tablelink.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("metadata_link", new global::System.Data.DataColumn[] {
                    this.tablemetadata.metadata_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablelink.metadata_IdColumn});
        this.tablelink.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("wpt_link", new global::System.Data.DataColumn[] {
                    this.tablewpt.wpt_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablelink.wpt_IdColumn});
        this.tablelink.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("rtept_link", new global::System.Data.DataColumn[] {
                    this.tablertept.rtept_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablelink.rtept_IdColumn});
        this.tablelink.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("rte_link", new global::System.Data.DataColumn[] {
                    this.tablerte.rte_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablelink.rte_IdColumn});
        this.tablelink.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("trkpt_link", new global::System.Data.DataColumn[] {
                    this.tabletrkpt.trkpt_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablelink.trkpt_IdColumn});
        this.tablelink.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("trk_link", new global::System.Data.DataColumn[] {
                    this.tabletrk.trk_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablelink.trk_IdColumn});
        this.tablelink.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("metadata_copyright", new global::System.Data.DataColumn[] {
                    this.tablemetadata.metadata_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablecopyright.metadata_IdColumn});
        this.tablecopyright.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("metadata_bounds", new global::System.Data.DataColumn[] {
                    this.tablemetadata.metadata_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablebounds.metadata_IdColumn});
        this.tablebounds.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("metadata_extensions", new global::System.Data.DataColumn[] {
                    this.tablemetadata.metadata_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.metadata_IdColumn});
        this.tableextensions.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("wpt_extensions", new global::System.Data.DataColumn[] {
                    this.tablewpt.wpt_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.wpt_IdColumn});
        this.tableextensions.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("rtept_extensions", new global::System.Data.DataColumn[] {
                    this.tablertept.rtept_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.rtept_IdColumn});
        this.tableextensions.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("rte_extensions", new global::System.Data.DataColumn[] {
                    this.tablerte.rte_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.rte_IdColumn});
        this.tableextensions.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("trkpt_extensions", new global::System.Data.DataColumn[] {
                    this.tabletrkpt.trkpt_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.trkpt_IdColumn});
        this.tableextensions.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("trkseg_extensions", new global::System.Data.DataColumn[] {
                    this.tabletrkseg.trkseg_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.trkseg_IdColumn});
        this.tableextensions.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("trk_extensions", new global::System.Data.DataColumn[] {
                    this.tabletrk.trk_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.trk_IdColumn});
        this.tableextensions.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("gpx_extensions", new global::System.Data.DataColumn[] {
                    this.tablegpx.gpx_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.gpx_IdColumn});
        this.tableextensions.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("gpx_wpt", new global::System.Data.DataColumn[] {
                    this.tablegpx.gpx_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablewpt.gpx_IdColumn});
        this.tablewpt.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("gpx_rte", new global::System.Data.DataColumn[] {
                    this.tablegpx.gpx_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablerte.gpx_IdColumn});
        this.tablerte.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("rte_rtept", new global::System.Data.DataColumn[] {
                    this.tablerte.rte_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablertept.rte_IdColumn});
        this.tablertept.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("gpx_trk", new global::System.Data.DataColumn[] {
                    this.tablegpx.gpx_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletrk.gpx_IdColumn});
        this.tabletrk.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("trk_trkseg", new global::System.Data.DataColumn[] {
                    this.tabletrk.trk_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletrkseg.trk_IdColumn});
        this.tabletrkseg.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("trkseg_trkpt", new global::System.Data.DataColumn[] {
                    this.tabletrkseg.trkseg_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletrkpt.trkseg_IdColumn});
        this.tabletrkpt.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        this.relationgpx_metadata = new global::System.Data.DataRelation("gpx_metadata", new global::System.Data.DataColumn[] {
                    this.tablegpx.gpx_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablemetadata.gpx_IdColumn}, false);
        this.relationgpx_metadata.Nested = true;
        this.Relations.Add(this.relationgpx_metadata);
        this.relationmetadata_author = new global::System.Data.DataRelation("metadata_author", new global::System.Data.DataColumn[] {
                    this.tablemetadata.metadata_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableauthor.metadata_IdColumn}, false);
        this.relationmetadata_author.Nested = true;
        this.Relations.Add(this.relationmetadata_author);
        this.relationauthor_email = new global::System.Data.DataRelation("author_email", new global::System.Data.DataColumn[] {
                    this.tableauthor.author_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableemail.author_IdColumn}, false);
        this.relationauthor_email.Nested = true;
        this.Relations.Add(this.relationauthor_email);
        this.relationauthor_link = new global::System.Data.DataRelation("author_link", new global::System.Data.DataColumn[] {
                    this.tableauthor.author_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablelink.author_IdColumn}, false);
        this.relationauthor_link.Nested = true;
        this.Relations.Add(this.relationauthor_link);
        this.relationmetadata_link = new global::System.Data.DataRelation("metadata_link", new global::System.Data.DataColumn[] {
                    this.tablemetadata.metadata_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablelink.metadata_IdColumn}, false);
        this.relationmetadata_link.Nested = true;
        this.Relations.Add(this.relationmetadata_link);
        this.relationwpt_link = new global::System.Data.DataRelation("wpt_link", new global::System.Data.DataColumn[] {
                    this.tablewpt.wpt_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablelink.wpt_IdColumn}, false);
        this.relationwpt_link.Nested = true;
        this.Relations.Add(this.relationwpt_link);
        this.relationrtept_link = new global::System.Data.DataRelation("rtept_link", new global::System.Data.DataColumn[] {
                    this.tablertept.rtept_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablelink.rtept_IdColumn}, false);
        this.relationrtept_link.Nested = true;
        this.Relations.Add(this.relationrtept_link);
        this.relationrte_link = new global::System.Data.DataRelation("rte_link", new global::System.Data.DataColumn[] {
                    this.tablerte.rte_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablelink.rte_IdColumn}, false);
        this.relationrte_link.Nested = true;
        this.Relations.Add(this.relationrte_link);
        this.relationtrkpt_link = new global::System.Data.DataRelation("trkpt_link", new global::System.Data.DataColumn[] {
                    this.tabletrkpt.trkpt_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablelink.trkpt_IdColumn}, false);
        this.relationtrkpt_link.Nested = true;
        this.Relations.Add(this.relationtrkpt_link);
        this.relationtrk_link = new global::System.Data.DataRelation("trk_link", new global::System.Data.DataColumn[] {
                    this.tabletrk.trk_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablelink.trk_IdColumn}, false);
        this.relationtrk_link.Nested = true;
        this.Relations.Add(this.relationtrk_link);
        this.relationmetadata_copyright = new global::System.Data.DataRelation("metadata_copyright", new global::System.Data.DataColumn[] {
                    this.tablemetadata.metadata_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablecopyright.metadata_IdColumn}, false);
        this.relationmetadata_copyright.Nested = true;
        this.Relations.Add(this.relationmetadata_copyright);
        this.relationmetadata_bounds = new global::System.Data.DataRelation("metadata_bounds", new global::System.Data.DataColumn[] {
                    this.tablemetadata.metadata_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablebounds.metadata_IdColumn}, false);
        this.relationmetadata_bounds.Nested = true;
        this.Relations.Add(this.relationmetadata_bounds);
        this.relationmetadata_extensions = new global::System.Data.DataRelation("metadata_extensions", new global::System.Data.DataColumn[] {
                    this.tablemetadata.metadata_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.metadata_IdColumn}, false);
        this.relationmetadata_extensions.Nested = true;
        this.Relations.Add(this.relationmetadata_extensions);
        this.relationwpt_extensions = new global::System.Data.DataRelation("wpt_extensions", new global::System.Data.DataColumn[] {
                    this.tablewpt.wpt_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.wpt_IdColumn}, false);
        this.relationwpt_extensions.Nested = true;
        this.Relations.Add(this.relationwpt_extensions);
        this.relationrtept_extensions = new global::System.Data.DataRelation("rtept_extensions", new global::System.Data.DataColumn[] {
                    this.tablertept.rtept_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.rtept_IdColumn}, false);
        this.relationrtept_extensions.Nested = true;
        this.Relations.Add(this.relationrtept_extensions);
        this.relationrte_extensions = new global::System.Data.DataRelation("rte_extensions", new global::System.Data.DataColumn[] {
                    this.tablerte.rte_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.rte_IdColumn}, false);
        this.relationrte_extensions.Nested = true;
        this.Relations.Add(this.relationrte_extensions);
        this.relationtrkpt_extensions = new global::System.Data.DataRelation("trkpt_extensions", new global::System.Data.DataColumn[] {
                    this.tabletrkpt.trkpt_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.trkpt_IdColumn}, false);
        this.relationtrkpt_extensions.Nested = true;
        this.Relations.Add(this.relationtrkpt_extensions);
        this.relationtrkseg_extensions = new global::System.Data.DataRelation("trkseg_extensions", new global::System.Data.DataColumn[] {
                    this.tabletrkseg.trkseg_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.trkseg_IdColumn}, false);
        this.relationtrkseg_extensions.Nested = true;
        this.Relations.Add(this.relationtrkseg_extensions);
        this.relationtrk_extensions = new global::System.Data.DataRelation("trk_extensions", new global::System.Data.DataColumn[] {
                    this.tabletrk.trk_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.trk_IdColumn}, false);
        this.relationtrk_extensions.Nested = true;
        this.Relations.Add(this.relationtrk_extensions);
        this.relationgpx_extensions = new global::System.Data.DataRelation("gpx_extensions", new global::System.Data.DataColumn[] {
                    this.tablegpx.gpx_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableextensions.gpx_IdColumn}, false);
        this.relationgpx_extensions.Nested = true;
        this.Relations.Add(this.relationgpx_extensions);
        this.relationgpx_wpt = new global::System.Data.DataRelation("gpx_wpt", new global::System.Data.DataColumn[] {
                    this.tablegpx.gpx_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablewpt.gpx_IdColumn}, false);
        this.relationgpx_wpt.Nested = true;
        this.Relations.Add(this.relationgpx_wpt);
        this.relationgpx_rte = new global::System.Data.DataRelation("gpx_rte", new global::System.Data.DataColumn[] {
                    this.tablegpx.gpx_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablerte.gpx_IdColumn}, false);
        this.relationgpx_rte.Nested = true;
        this.Relations.Add(this.relationgpx_rte);
        this.relationrte_rtept = new global::System.Data.DataRelation("rte_rtept", new global::System.Data.DataColumn[] {
                    this.tablerte.rte_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablertept.rte_IdColumn}, false);
        this.relationrte_rtept.Nested = true;
        this.Relations.Add(this.relationrte_rtept);
        this.relationgpx_trk = new global::System.Data.DataRelation("gpx_trk", new global::System.Data.DataColumn[] {
                    this.tablegpx.gpx_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletrk.gpx_IdColumn}, false);
        this.relationgpx_trk.Nested = true;
        this.Relations.Add(this.relationgpx_trk);
        this.relationtrk_trkseg = new global::System.Data.DataRelation("trk_trkseg", new global::System.Data.DataColumn[] {
                    this.tabletrk.trk_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletrkseg.trk_IdColumn}, false);
        this.relationtrk_trkseg.Nested = true;
        this.Relations.Add(this.relationtrk_trkseg);
        this.relationtrkseg_trkpt = new global::System.Data.DataRelation("trkseg_trkpt", new global::System.Data.DataColumn[] {
                    this.tabletrkseg.trkseg_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletrkpt.trkseg_IdColumn}, false);
        this.relationtrkseg_trkpt.Nested = true;
        this.Relations.Add(this.relationtrkseg_trkpt);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializegpx() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializemetadata() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeauthor() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeemail() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializelink() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializecopyright() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializebounds() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeextensions() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializewpt() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializerte() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializertept() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializetrk() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializetrkseg() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializetrkpt() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
        GPXDataSet ds = new GPXDataSet();
        global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
        global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
        global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
        if (xs.Contains(dsSchema.TargetNamespace)) {
            global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
            global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
            try {
                global::System.Xml.Schema.XmlSchema schema = null;
                dsSchema.Write(s1);
                for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                    schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                    s2.SetLength(0);
                    schema.Write(s2);
                    if ((s1.Length == s2.Length)) {
                        s1.Position = 0;
                        s2.Position = 0;
                        for (; ((s1.Position != s1.Length) 
                                    && (s1.ReadByte() == s2.ReadByte())); ) {
                            ;
                        }
                        if ((s1.Position == s1.Length)) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if ((s1 != null)) {
                    s1.Close();
                }
                if ((s2 != null)) {
                    s2.Close();
                }
            }
        }
        xs.Add(dsSchema);
        return type;
    }
    
    public delegate void gpxRowChangeEventHandler(object sender, gpxRowChangeEvent e);
    
    public delegate void metadataRowChangeEventHandler(object sender, metadataRowChangeEvent e);
    
    public delegate void authorRowChangeEventHandler(object sender, authorRowChangeEvent e);
    
    public delegate void emailRowChangeEventHandler(object sender, emailRowChangeEvent e);
    
    public delegate void linkRowChangeEventHandler(object sender, linkRowChangeEvent e);
    
    public delegate void copyrightRowChangeEventHandler(object sender, copyrightRowChangeEvent e);
    
    public delegate void boundsRowChangeEventHandler(object sender, boundsRowChangeEvent e);
    
    public delegate void extensionsRowChangeEventHandler(object sender, extensionsRowChangeEvent e);
    
    public delegate void wptRowChangeEventHandler(object sender, wptRowChangeEvent e);
    
    public delegate void rteRowChangeEventHandler(object sender, rteRowChangeEvent e);
    
    public delegate void rteptRowChangeEventHandler(object sender, rteptRowChangeEvent e);
    
    public delegate void trkRowChangeEventHandler(object sender, trkRowChangeEvent e);
    
    public delegate void trksegRowChangeEventHandler(object sender, trksegRowChangeEvent e);
    
    public delegate void trkptRowChangeEventHandler(object sender, trkptRowChangeEvent e);
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class gpxDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnversion;
        
        private global::System.Data.DataColumn columncreator;
        
        private global::System.Data.DataColumn columngpx_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public gpxDataTable() {
            this.TableName = "gpx";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal gpxDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected gpxDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn versionColumn {
            get {
                return this.columnversion;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn creatorColumn {
            get {
                return this.columncreator;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn gpx_IdColumn {
            get {
                return this.columngpx_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public gpxRow this[int index] {
            get {
                return ((gpxRow)(this.Rows[index]));
            }
        }
        
        public event gpxRowChangeEventHandler gpxRowChanging;
        
        public event gpxRowChangeEventHandler gpxRowChanged;
        
        public event gpxRowChangeEventHandler gpxRowDeleting;
        
        public event gpxRowChangeEventHandler gpxRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddgpxRow(gpxRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public gpxRow AddgpxRow(string version, string creator) {
            gpxRow rowgpxRow = ((gpxRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    version,
                    creator,
                    null};
            rowgpxRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowgpxRow);
            return rowgpxRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            gpxDataTable cln = ((gpxDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new gpxDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnversion = base.Columns["version"];
            this.columncreator = base.Columns["creator"];
            this.columngpx_Id = base.Columns["gpx_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnversion = new global::System.Data.DataColumn("version", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnversion);
            this.columncreator = new global::System.Data.DataColumn("creator", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columncreator);
            this.columngpx_Id = new global::System.Data.DataColumn("gpx_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columngpx_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columngpx_Id}, true));
            this.columnversion.AllowDBNull = false;
            this.columnversion.Namespace = "";
            this.columncreator.AllowDBNull = false;
            this.columncreator.Namespace = "";
            this.columngpx_Id.AutoIncrement = true;
            this.columngpx_Id.AllowDBNull = false;
            this.columngpx_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public gpxRow NewgpxRow() {
            return ((gpxRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new gpxRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(gpxRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.gpxRowChanged != null)) {
                this.gpxRowChanged(this, new gpxRowChangeEvent(((gpxRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.gpxRowChanging != null)) {
                this.gpxRowChanging(this, new gpxRowChangeEvent(((gpxRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.gpxRowDeleted != null)) {
                this.gpxRowDeleted(this, new gpxRowChangeEvent(((gpxRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.gpxRowDeleting != null)) {
                this.gpxRowDeleting(this, new gpxRowChangeEvent(((gpxRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovegpxRow(gpxRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            GPXDataSet ds = new GPXDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "gpxDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class metadataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnname;
        
        private global::System.Data.DataColumn columndesc;
        
        private global::System.Data.DataColumn columntime;
        
        private global::System.Data.DataColumn columnkeywords;
        
        private global::System.Data.DataColumn columnmetadata_Id;
        
        private global::System.Data.DataColumn columngpx_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public metadataDataTable() {
            this.TableName = "metadata";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal metadataDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected metadataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn nameColumn {
            get {
                return this.columnname;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn descColumn {
            get {
                return this.columndesc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn timeColumn {
            get {
                return this.columntime;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn keywordsColumn {
            get {
                return this.columnkeywords;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn metadata_IdColumn {
            get {
                return this.columnmetadata_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn gpx_IdColumn {
            get {
                return this.columngpx_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public metadataRow this[int index] {
            get {
                return ((metadataRow)(this.Rows[index]));
            }
        }
        
        public event metadataRowChangeEventHandler metadataRowChanging;
        
        public event metadataRowChangeEventHandler metadataRowChanged;
        
        public event metadataRowChangeEventHandler metadataRowDeleting;
        
        public event metadataRowChangeEventHandler metadataRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddmetadataRow(metadataRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public metadataRow AddmetadataRow(string name, string desc, System.DateTime time, string keywords, gpxRow parentgpxRowBygpx_metadata) {
            metadataRow rowmetadataRow = ((metadataRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    name,
                    desc,
                    time,
                    keywords,
                    null,
                    null};
            if ((parentgpxRowBygpx_metadata != null)) {
                columnValuesArray[5] = parentgpxRowBygpx_metadata[2];
            }
            rowmetadataRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowmetadataRow);
            return rowmetadataRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            metadataDataTable cln = ((metadataDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new metadataDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnname = base.Columns["name"];
            this.columndesc = base.Columns["desc"];
            this.columntime = base.Columns["time"];
            this.columnkeywords = base.Columns["keywords"];
            this.columnmetadata_Id = base.Columns["metadata_Id"];
            this.columngpx_Id = base.Columns["gpx_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnname);
            this.columndesc = new global::System.Data.DataColumn("desc", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columndesc);
            this.columntime = new global::System.Data.DataColumn("time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntime);
            this.columnkeywords = new global::System.Data.DataColumn("keywords", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnkeywords);
            this.columnmetadata_Id = new global::System.Data.DataColumn("metadata_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnmetadata_Id);
            this.columngpx_Id = new global::System.Data.DataColumn("gpx_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columngpx_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnmetadata_Id}, true));
            this.columnmetadata_Id.AutoIncrement = true;
            this.columnmetadata_Id.AllowDBNull = false;
            this.columnmetadata_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public metadataRow NewmetadataRow() {
            return ((metadataRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new metadataRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(metadataRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.metadataRowChanged != null)) {
                this.metadataRowChanged(this, new metadataRowChangeEvent(((metadataRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.metadataRowChanging != null)) {
                this.metadataRowChanging(this, new metadataRowChangeEvent(((metadataRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.metadataRowDeleted != null)) {
                this.metadataRowDeleted(this, new metadataRowChangeEvent(((metadataRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.metadataRowDeleting != null)) {
                this.metadataRowDeleting(this, new metadataRowChangeEvent(((metadataRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovemetadataRow(metadataRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            GPXDataSet ds = new GPXDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "metadataDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class authorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnname;
        
        private global::System.Data.DataColumn columnauthor_Id;
        
        private global::System.Data.DataColumn columnmetadata_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public authorDataTable() {
            this.TableName = "author";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal authorDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected authorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn nameColumn {
            get {
                return this.columnname;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn author_IdColumn {
            get {
                return this.columnauthor_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn metadata_IdColumn {
            get {
                return this.columnmetadata_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public authorRow this[int index] {
            get {
                return ((authorRow)(this.Rows[index]));
            }
        }
        
        public event authorRowChangeEventHandler authorRowChanging;
        
        public event authorRowChangeEventHandler authorRowChanged;
        
        public event authorRowChangeEventHandler authorRowDeleting;
        
        public event authorRowChangeEventHandler authorRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddauthorRow(authorRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public authorRow AddauthorRow(string name, metadataRow parentmetadataRowBymetadata_author) {
            authorRow rowauthorRow = ((authorRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    name,
                    null,
                    null};
            if ((parentmetadataRowBymetadata_author != null)) {
                columnValuesArray[2] = parentmetadataRowBymetadata_author[4];
            }
            rowauthorRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowauthorRow);
            return rowauthorRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            authorDataTable cln = ((authorDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new authorDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnname = base.Columns["name"];
            this.columnauthor_Id = base.Columns["author_Id"];
            this.columnmetadata_Id = base.Columns["metadata_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnname);
            this.columnauthor_Id = new global::System.Data.DataColumn("author_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnauthor_Id);
            this.columnmetadata_Id = new global::System.Data.DataColumn("metadata_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnmetadata_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnauthor_Id}, true));
            this.columnauthor_Id.AutoIncrement = true;
            this.columnauthor_Id.AllowDBNull = false;
            this.columnauthor_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public authorRow NewauthorRow() {
            return ((authorRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new authorRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(authorRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.authorRowChanged != null)) {
                this.authorRowChanged(this, new authorRowChangeEvent(((authorRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.authorRowChanging != null)) {
                this.authorRowChanging(this, new authorRowChangeEvent(((authorRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.authorRowDeleted != null)) {
                this.authorRowDeleted(this, new authorRowChangeEvent(((authorRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.authorRowDeleting != null)) {
                this.authorRowDeleting(this, new authorRowChangeEvent(((authorRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveauthorRow(authorRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            GPXDataSet ds = new GPXDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "authorDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class emailDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnid;
        
        private global::System.Data.DataColumn columndomain;
        
        private global::System.Data.DataColumn columnauthor_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public emailDataTable() {
            this.TableName = "email";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal emailDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected emailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn idColumn {
            get {
                return this.columnid;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn domainColumn {
            get {
                return this.columndomain;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn author_IdColumn {
            get {
                return this.columnauthor_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public emailRow this[int index] {
            get {
                return ((emailRow)(this.Rows[index]));
            }
        }
        
        public event emailRowChangeEventHandler emailRowChanging;
        
        public event emailRowChangeEventHandler emailRowChanged;
        
        public event emailRowChangeEventHandler emailRowDeleting;
        
        public event emailRowChangeEventHandler emailRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddemailRow(emailRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public emailRow AddemailRow(string id, string domain, authorRow parentauthorRowByauthor_email) {
            emailRow rowemailRow = ((emailRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    id,
                    domain,
                    null};
            if ((parentauthorRowByauthor_email != null)) {
                columnValuesArray[2] = parentauthorRowByauthor_email[1];
            }
            rowemailRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowemailRow);
            return rowemailRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            emailDataTable cln = ((emailDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new emailDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnid = base.Columns["id"];
            this.columndomain = base.Columns["domain"];
            this.columnauthor_Id = base.Columns["author_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnid);
            this.columndomain = new global::System.Data.DataColumn("domain", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columndomain);
            this.columnauthor_Id = new global::System.Data.DataColumn("author_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnauthor_Id);
            this.columnid.AllowDBNull = false;
            this.columnid.Namespace = "";
            this.columndomain.AllowDBNull = false;
            this.columndomain.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public emailRow NewemailRow() {
            return ((emailRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new emailRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(emailRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.emailRowChanged != null)) {
                this.emailRowChanged(this, new emailRowChangeEvent(((emailRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.emailRowChanging != null)) {
                this.emailRowChanging(this, new emailRowChangeEvent(((emailRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.emailRowDeleted != null)) {
                this.emailRowDeleted(this, new emailRowChangeEvent(((emailRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.emailRowDeleting != null)) {
                this.emailRowDeleting(this, new emailRowChangeEvent(((emailRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveemailRow(emailRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            GPXDataSet ds = new GPXDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "emailDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class linkDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnhref;
        
        private global::System.Data.DataColumn columntext;
        
        private global::System.Data.DataColumn columntype;
        
        private global::System.Data.DataColumn columnauthor_Id;
        
        private global::System.Data.DataColumn columnmetadata_Id;
        
        private global::System.Data.DataColumn columnwpt_Id;
        
        private global::System.Data.DataColumn columnrtept_Id;
        
        private global::System.Data.DataColumn columnrte_Id;
        
        private global::System.Data.DataColumn columntrkpt_Id;
        
        private global::System.Data.DataColumn columntrk_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public linkDataTable() {
            this.TableName = "link";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal linkDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected linkDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn hrefColumn {
            get {
                return this.columnhref;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn textColumn {
            get {
                return this.columntext;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn typeColumn {
            get {
                return this.columntype;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn author_IdColumn {
            get {
                return this.columnauthor_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn metadata_IdColumn {
            get {
                return this.columnmetadata_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn wpt_IdColumn {
            get {
                return this.columnwpt_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn rtept_IdColumn {
            get {
                return this.columnrtept_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn rte_IdColumn {
            get {
                return this.columnrte_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn trkpt_IdColumn {
            get {
                return this.columntrkpt_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn trk_IdColumn {
            get {
                return this.columntrk_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public linkRow this[int index] {
            get {
                return ((linkRow)(this.Rows[index]));
            }
        }
        
        public event linkRowChangeEventHandler linkRowChanging;
        
        public event linkRowChangeEventHandler linkRowChanged;
        
        public event linkRowChangeEventHandler linkRowDeleting;
        
        public event linkRowChangeEventHandler linkRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddlinkRow(linkRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public linkRow AddlinkRow(System.Uri href, string text, string type, authorRow parentauthorRowByauthor_link, metadataRow parentmetadataRowBymetadata_link, wptRow parentwptRowBywpt_link, rteptRow parentrteptRowByrtept_link, rteRow parentrteRowByrte_link, trkptRow parenttrkptRowBytrkpt_link, trkRow parenttrkRowBytrk_link) {
            linkRow rowlinkRow = ((linkRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    href,
                    text,
                    type,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null};
            if ((parentauthorRowByauthor_link != null)) {
                columnValuesArray[3] = parentauthorRowByauthor_link[1];
            }
            if ((parentmetadataRowBymetadata_link != null)) {
                columnValuesArray[4] = parentmetadataRowBymetadata_link[4];
            }
            if ((parentwptRowBywpt_link != null)) {
                columnValuesArray[5] = parentwptRowBywpt_link[19];
            }
            if ((parentrteptRowByrtept_link != null)) {
                columnValuesArray[6] = parentrteptRowByrtept_link[19];
            }
            if ((parentrteRowByrte_link != null)) {
                columnValuesArray[7] = parentrteRowByrte_link[6];
            }
            if ((parenttrkptRowBytrkpt_link != null)) {
                columnValuesArray[8] = parenttrkptRowBytrkpt_link[19];
            }
            if ((parenttrkRowBytrk_link != null)) {
                columnValuesArray[9] = parenttrkRowBytrk_link[6];
            }
            rowlinkRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowlinkRow);
            return rowlinkRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            linkDataTable cln = ((linkDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new linkDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnhref = base.Columns["href"];
            this.columntext = base.Columns["text"];
            this.columntype = base.Columns["type"];
            this.columnauthor_Id = base.Columns["author_Id"];
            this.columnmetadata_Id = base.Columns["metadata_Id"];
            this.columnwpt_Id = base.Columns["wpt_Id"];
            this.columnrtept_Id = base.Columns["rtept_Id"];
            this.columnrte_Id = base.Columns["rte_Id"];
            this.columntrkpt_Id = base.Columns["trkpt_Id"];
            this.columntrk_Id = base.Columns["trk_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnhref = new global::System.Data.DataColumn("href", typeof(global::System.Uri), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnhref);
            this.columntext = new global::System.Data.DataColumn("text", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntext);
            this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntype);
            this.columnauthor_Id = new global::System.Data.DataColumn("author_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnauthor_Id);
            this.columnmetadata_Id = new global::System.Data.DataColumn("metadata_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnmetadata_Id);
            this.columnwpt_Id = new global::System.Data.DataColumn("wpt_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnwpt_Id);
            this.columnrtept_Id = new global::System.Data.DataColumn("rtept_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnrtept_Id);
            this.columnrte_Id = new global::System.Data.DataColumn("rte_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnrte_Id);
            this.columntrkpt_Id = new global::System.Data.DataColumn("trkpt_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columntrkpt_Id);
            this.columntrk_Id = new global::System.Data.DataColumn("trk_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columntrk_Id);
            this.columnhref.AllowDBNull = false;
            this.columnhref.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public linkRow NewlinkRow() {
            return ((linkRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new linkRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(linkRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.linkRowChanged != null)) {
                this.linkRowChanged(this, new linkRowChangeEvent(((linkRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.linkRowChanging != null)) {
                this.linkRowChanging(this, new linkRowChangeEvent(((linkRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.linkRowDeleted != null)) {
                this.linkRowDeleted(this, new linkRowChangeEvent(((linkRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.linkRowDeleting != null)) {
                this.linkRowDeleting(this, new linkRowChangeEvent(((linkRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovelinkRow(linkRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            GPXDataSet ds = new GPXDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "linkDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class copyrightDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnauthor;
        
        private global::System.Data.DataColumn columnyear;
        
        private global::System.Data.DataColumn columnlicense;
        
        private global::System.Data.DataColumn columnmetadata_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public copyrightDataTable() {
            this.TableName = "copyright";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal copyrightDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected copyrightDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn authorColumn {
            get {
                return this.columnauthor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn yearColumn {
            get {
                return this.columnyear;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn licenseColumn {
            get {
                return this.columnlicense;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn metadata_IdColumn {
            get {
                return this.columnmetadata_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public copyrightRow this[int index] {
            get {
                return ((copyrightRow)(this.Rows[index]));
            }
        }
        
        public event copyrightRowChangeEventHandler copyrightRowChanging;
        
        public event copyrightRowChangeEventHandler copyrightRowChanged;
        
        public event copyrightRowChangeEventHandler copyrightRowDeleting;
        
        public event copyrightRowChangeEventHandler copyrightRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddcopyrightRow(copyrightRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public copyrightRow AddcopyrightRow(string author, System.DateTime year, System.Uri license, metadataRow parentmetadataRowBymetadata_copyright) {
            copyrightRow rowcopyrightRow = ((copyrightRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    author,
                    year,
                    license,
                    null};
            if ((parentmetadataRowBymetadata_copyright != null)) {
                columnValuesArray[3] = parentmetadataRowBymetadata_copyright[4];
            }
            rowcopyrightRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowcopyrightRow);
            return rowcopyrightRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            copyrightDataTable cln = ((copyrightDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new copyrightDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnauthor = base.Columns["author"];
            this.columnyear = base.Columns["year"];
            this.columnlicense = base.Columns["license"];
            this.columnmetadata_Id = base.Columns["metadata_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnauthor = new global::System.Data.DataColumn("author", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnauthor);
            this.columnyear = new global::System.Data.DataColumn("year", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnyear);
            this.columnlicense = new global::System.Data.DataColumn("license", typeof(global::System.Uri), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnlicense);
            this.columnmetadata_Id = new global::System.Data.DataColumn("metadata_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnmetadata_Id);
            this.columnauthor.AllowDBNull = false;
            this.columnauthor.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public copyrightRow NewcopyrightRow() {
            return ((copyrightRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new copyrightRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(copyrightRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.copyrightRowChanged != null)) {
                this.copyrightRowChanged(this, new copyrightRowChangeEvent(((copyrightRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.copyrightRowChanging != null)) {
                this.copyrightRowChanging(this, new copyrightRowChangeEvent(((copyrightRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.copyrightRowDeleted != null)) {
                this.copyrightRowDeleted(this, new copyrightRowChangeEvent(((copyrightRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.copyrightRowDeleting != null)) {
                this.copyrightRowDeleting(this, new copyrightRowChangeEvent(((copyrightRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovecopyrightRow(copyrightRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            GPXDataSet ds = new GPXDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "copyrightDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class boundsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnminlat;
        
        private global::System.Data.DataColumn columnminlon;
        
        private global::System.Data.DataColumn columnmaxlat;
        
        private global::System.Data.DataColumn columnmaxlon;
        
        private global::System.Data.DataColumn columnmetadata_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public boundsDataTable() {
            this.TableName = "bounds";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal boundsDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected boundsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn minlatColumn {
            get {
                return this.columnminlat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn minlonColumn {
            get {
                return this.columnminlon;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn maxlatColumn {
            get {
                return this.columnmaxlat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn maxlonColumn {
            get {
                return this.columnmaxlon;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn metadata_IdColumn {
            get {
                return this.columnmetadata_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public boundsRow this[int index] {
            get {
                return ((boundsRow)(this.Rows[index]));
            }
        }
        
        public event boundsRowChangeEventHandler boundsRowChanging;
        
        public event boundsRowChangeEventHandler boundsRowChanged;
        
        public event boundsRowChangeEventHandler boundsRowDeleting;
        
        public event boundsRowChangeEventHandler boundsRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddboundsRow(boundsRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public boundsRow AddboundsRow(decimal minlat, decimal minlon, decimal maxlat, decimal maxlon, metadataRow parentmetadataRowBymetadata_bounds) {
            boundsRow rowboundsRow = ((boundsRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    minlat,
                    minlon,
                    maxlat,
                    maxlon,
                    null};
            if ((parentmetadataRowBymetadata_bounds != null)) {
                columnValuesArray[4] = parentmetadataRowBymetadata_bounds[4];
            }
            rowboundsRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowboundsRow);
            return rowboundsRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            boundsDataTable cln = ((boundsDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new boundsDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnminlat = base.Columns["minlat"];
            this.columnminlon = base.Columns["minlon"];
            this.columnmaxlat = base.Columns["maxlat"];
            this.columnmaxlon = base.Columns["maxlon"];
            this.columnmetadata_Id = base.Columns["metadata_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnminlat = new global::System.Data.DataColumn("minlat", typeof(decimal), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnminlat);
            this.columnminlon = new global::System.Data.DataColumn("minlon", typeof(decimal), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnminlon);
            this.columnmaxlat = new global::System.Data.DataColumn("maxlat", typeof(decimal), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnmaxlat);
            this.columnmaxlon = new global::System.Data.DataColumn("maxlon", typeof(decimal), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnmaxlon);
            this.columnmetadata_Id = new global::System.Data.DataColumn("metadata_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnmetadata_Id);
            this.columnminlat.AllowDBNull = false;
            this.columnminlat.Namespace = "";
            this.columnminlon.AllowDBNull = false;
            this.columnminlon.Namespace = "";
            this.columnmaxlat.AllowDBNull = false;
            this.columnmaxlat.Namespace = "";
            this.columnmaxlon.AllowDBNull = false;
            this.columnmaxlon.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public boundsRow NewboundsRow() {
            return ((boundsRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new boundsRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(boundsRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.boundsRowChanged != null)) {
                this.boundsRowChanged(this, new boundsRowChangeEvent(((boundsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.boundsRowChanging != null)) {
                this.boundsRowChanging(this, new boundsRowChangeEvent(((boundsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.boundsRowDeleted != null)) {
                this.boundsRowDeleted(this, new boundsRowChangeEvent(((boundsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.boundsRowDeleting != null)) {
                this.boundsRowDeleting(this, new boundsRowChangeEvent(((boundsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveboundsRow(boundsRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            GPXDataSet ds = new GPXDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "boundsDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class extensionsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnmetadata_Id;
        
        private global::System.Data.DataColumn columnwpt_Id;
        
        private global::System.Data.DataColumn columnrtept_Id;
        
        private global::System.Data.DataColumn columnrte_Id;
        
        private global::System.Data.DataColumn columntrkpt_Id;
        
        private global::System.Data.DataColumn columntrkseg_Id;
        
        private global::System.Data.DataColumn columntrk_Id;
        
        private global::System.Data.DataColumn columngpx_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public extensionsDataTable() {
            this.TableName = "extensions";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal extensionsDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected extensionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn metadata_IdColumn {
            get {
                return this.columnmetadata_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn wpt_IdColumn {
            get {
                return this.columnwpt_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn rtept_IdColumn {
            get {
                return this.columnrtept_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn rte_IdColumn {
            get {
                return this.columnrte_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn trkpt_IdColumn {
            get {
                return this.columntrkpt_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn trkseg_IdColumn {
            get {
                return this.columntrkseg_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn trk_IdColumn {
            get {
                return this.columntrk_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn gpx_IdColumn {
            get {
                return this.columngpx_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public extensionsRow this[int index] {
            get {
                return ((extensionsRow)(this.Rows[index]));
            }
        }
        
        public event extensionsRowChangeEventHandler extensionsRowChanging;
        
        public event extensionsRowChangeEventHandler extensionsRowChanged;
        
        public event extensionsRowChangeEventHandler extensionsRowDeleting;
        
        public event extensionsRowChangeEventHandler extensionsRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddextensionsRow(extensionsRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public extensionsRow AddextensionsRow(metadataRow parentmetadataRowBymetadata_extensions, wptRow parentwptRowBywpt_extensions, rteptRow parentrteptRowByrtept_extensions, rteRow parentrteRowByrte_extensions, trkptRow parenttrkptRowBytrkpt_extensions, trksegRow parenttrksegRowBytrkseg_extensions, trkRow parenttrkRowBytrk_extensions, gpxRow parentgpxRowBygpx_extensions) {
            extensionsRow rowextensionsRow = ((extensionsRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null};
            if ((parentmetadataRowBymetadata_extensions != null)) {
                columnValuesArray[0] = parentmetadataRowBymetadata_extensions[4];
            }
            if ((parentwptRowBywpt_extensions != null)) {
                columnValuesArray[1] = parentwptRowBywpt_extensions[19];
            }
            if ((parentrteptRowByrtept_extensions != null)) {
                columnValuesArray[2] = parentrteptRowByrtept_extensions[19];
            }
            if ((parentrteRowByrte_extensions != null)) {
                columnValuesArray[3] = parentrteRowByrte_extensions[6];
            }
            if ((parenttrkptRowBytrkpt_extensions != null)) {
                columnValuesArray[4] = parenttrkptRowBytrkpt_extensions[19];
            }
            if ((parenttrksegRowBytrkseg_extensions != null)) {
                columnValuesArray[5] = parenttrksegRowBytrkseg_extensions[0];
            }
            if ((parenttrkRowBytrk_extensions != null)) {
                columnValuesArray[6] = parenttrkRowBytrk_extensions[6];
            }
            if ((parentgpxRowBygpx_extensions != null)) {
                columnValuesArray[7] = parentgpxRowBygpx_extensions[2];
            }
            rowextensionsRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowextensionsRow);
            return rowextensionsRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            extensionsDataTable cln = ((extensionsDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new extensionsDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnmetadata_Id = base.Columns["metadata_Id"];
            this.columnwpt_Id = base.Columns["wpt_Id"];
            this.columnrtept_Id = base.Columns["rtept_Id"];
            this.columnrte_Id = base.Columns["rte_Id"];
            this.columntrkpt_Id = base.Columns["trkpt_Id"];
            this.columntrkseg_Id = base.Columns["trkseg_Id"];
            this.columntrk_Id = base.Columns["trk_Id"];
            this.columngpx_Id = base.Columns["gpx_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnmetadata_Id = new global::System.Data.DataColumn("metadata_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnmetadata_Id);
            this.columnwpt_Id = new global::System.Data.DataColumn("wpt_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnwpt_Id);
            this.columnrtept_Id = new global::System.Data.DataColumn("rtept_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnrtept_Id);
            this.columnrte_Id = new global::System.Data.DataColumn("rte_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnrte_Id);
            this.columntrkpt_Id = new global::System.Data.DataColumn("trkpt_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columntrkpt_Id);
            this.columntrkseg_Id = new global::System.Data.DataColumn("trkseg_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columntrkseg_Id);
            this.columntrk_Id = new global::System.Data.DataColumn("trk_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columntrk_Id);
            this.columngpx_Id = new global::System.Data.DataColumn("gpx_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columngpx_Id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public extensionsRow NewextensionsRow() {
            return ((extensionsRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new extensionsRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(extensionsRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.extensionsRowChanged != null)) {
                this.extensionsRowChanged(this, new extensionsRowChangeEvent(((extensionsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.extensionsRowChanging != null)) {
                this.extensionsRowChanging(this, new extensionsRowChangeEvent(((extensionsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.extensionsRowDeleted != null)) {
                this.extensionsRowDeleted(this, new extensionsRowChangeEvent(((extensionsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.extensionsRowDeleting != null)) {
                this.extensionsRowDeleting(this, new extensionsRowChangeEvent(((extensionsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveextensionsRow(extensionsRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            GPXDataSet ds = new GPXDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "extensionsDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class wptDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnlat;
        
        private global::System.Data.DataColumn columnlon;
        
        private global::System.Data.DataColumn columnele;
        
        private global::System.Data.DataColumn columntime;
        
        private global::System.Data.DataColumn columnmagvar;
        
        private global::System.Data.DataColumn columngeoidheight;
        
        private global::System.Data.DataColumn columnname;
        
        private global::System.Data.DataColumn columncmt;
        
        private global::System.Data.DataColumn columndesc;
        
        private global::System.Data.DataColumn columnsrc;
        
        private global::System.Data.DataColumn columnsym;
        
        private global::System.Data.DataColumn columntype;
        
        private global::System.Data.DataColumn columnfix;
        
        private global::System.Data.DataColumn columnsat;
        
        private global::System.Data.DataColumn columnhdop;
        
        private global::System.Data.DataColumn columnvdop;
        
        private global::System.Data.DataColumn columnpdop;
        
        private global::System.Data.DataColumn columnageofdgpsdata;
        
        private global::System.Data.DataColumn columndgpsid;
        
        private global::System.Data.DataColumn columnwpt_Id;
        
        private global::System.Data.DataColumn columngpx_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public wptDataTable() {
            this.TableName = "wpt";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal wptDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected wptDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn latColumn {
            get {
                return this.columnlat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn lonColumn {
            get {
                return this.columnlon;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn eleColumn {
            get {
                return this.columnele;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn timeColumn {
            get {
                return this.columntime;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn magvarColumn {
            get {
                return this.columnmagvar;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn geoidheightColumn {
            get {
                return this.columngeoidheight;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn nameColumn {
            get {
                return this.columnname;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn cmtColumn {
            get {
                return this.columncmt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn descColumn {
            get {
                return this.columndesc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn srcColumn {
            get {
                return this.columnsrc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn symColumn {
            get {
                return this.columnsym;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn typeColumn {
            get {
                return this.columntype;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn fixColumn {
            get {
                return this.columnfix;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn satColumn {
            get {
                return this.columnsat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn hdopColumn {
            get {
                return this.columnhdop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn vdopColumn {
            get {
                return this.columnvdop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn pdopColumn {
            get {
                return this.columnpdop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ageofdgpsdataColumn {
            get {
                return this.columnageofdgpsdata;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn dgpsidColumn {
            get {
                return this.columndgpsid;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn wpt_IdColumn {
            get {
                return this.columnwpt_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn gpx_IdColumn {
            get {
                return this.columngpx_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public wptRow this[int index] {
            get {
                return ((wptRow)(this.Rows[index]));
            }
        }
        
        public event wptRowChangeEventHandler wptRowChanging;
        
        public event wptRowChangeEventHandler wptRowChanged;
        
        public event wptRowChangeEventHandler wptRowDeleting;
        
        public event wptRowChangeEventHandler wptRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddwptRow(wptRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public wptRow AddwptRow(
                    decimal lat, 
                    decimal lon, 
                    decimal ele, 
                    System.DateTime time, 
                    decimal magvar, 
                    decimal geoidheight, 
                    string name, 
                    string cmt, 
                    string desc, 
                    string src, 
                    string sym, 
                    string type, 
                    string fix, 
                    ulong sat, 
                    decimal hdop, 
                    decimal vdop, 
                    decimal pdop, 
                    decimal ageofdgpsdata, 
                    long dgpsid, 
                    gpxRow parentgpxRowBygpx_wpt) {
            wptRow rowwptRow = ((wptRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    lat,
                    lon,
                    ele,
                    time,
                    magvar,
                    geoidheight,
                    name,
                    cmt,
                    desc,
                    src,
                    sym,
                    type,
                    fix,
                    sat,
                    hdop,
                    vdop,
                    pdop,
                    ageofdgpsdata,
                    dgpsid,
                    null,
                    null};
            if ((parentgpxRowBygpx_wpt != null)) {
                columnValuesArray[20] = parentgpxRowBygpx_wpt[2];
            }
            rowwptRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowwptRow);
            return rowwptRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            wptDataTable cln = ((wptDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new wptDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnlat = base.Columns["lat"];
            this.columnlon = base.Columns["lon"];
            this.columnele = base.Columns["ele"];
            this.columntime = base.Columns["time"];
            this.columnmagvar = base.Columns["magvar"];
            this.columngeoidheight = base.Columns["geoidheight"];
            this.columnname = base.Columns["name"];
            this.columncmt = base.Columns["cmt"];
            this.columndesc = base.Columns["desc"];
            this.columnsrc = base.Columns["src"];
            this.columnsym = base.Columns["sym"];
            this.columntype = base.Columns["type"];
            this.columnfix = base.Columns["fix"];
            this.columnsat = base.Columns["sat"];
            this.columnhdop = base.Columns["hdop"];
            this.columnvdop = base.Columns["vdop"];
            this.columnpdop = base.Columns["pdop"];
            this.columnageofdgpsdata = base.Columns["ageofdgpsdata"];
            this.columndgpsid = base.Columns["dgpsid"];
            this.columnwpt_Id = base.Columns["wpt_Id"];
            this.columngpx_Id = base.Columns["gpx_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnlat = new global::System.Data.DataColumn("lat", typeof(decimal), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnlat);
            this.columnlon = new global::System.Data.DataColumn("lon", typeof(decimal), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnlon);
            this.columnele = new global::System.Data.DataColumn("ele", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnele);
            this.columntime = new global::System.Data.DataColumn("time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntime);
            this.columnmagvar = new global::System.Data.DataColumn("magvar", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnmagvar);
            this.columngeoidheight = new global::System.Data.DataColumn("geoidheight", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columngeoidheight);
            this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnname);
            this.columncmt = new global::System.Data.DataColumn("cmt", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncmt);
            this.columndesc = new global::System.Data.DataColumn("desc", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columndesc);
            this.columnsrc = new global::System.Data.DataColumn("src", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsrc);
            this.columnsym = new global::System.Data.DataColumn("sym", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsym);
            this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntype);
            this.columnfix = new global::System.Data.DataColumn("fix", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnfix);
            this.columnsat = new global::System.Data.DataColumn("sat", typeof(ulong), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsat);
            this.columnhdop = new global::System.Data.DataColumn("hdop", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnhdop);
            this.columnvdop = new global::System.Data.DataColumn("vdop", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnvdop);
            this.columnpdop = new global::System.Data.DataColumn("pdop", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnpdop);
            this.columnageofdgpsdata = new global::System.Data.DataColumn("ageofdgpsdata", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnageofdgpsdata);
            this.columndgpsid = new global::System.Data.DataColumn("dgpsid", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columndgpsid);
            this.columnwpt_Id = new global::System.Data.DataColumn("wpt_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnwpt_Id);
            this.columngpx_Id = new global::System.Data.DataColumn("gpx_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columngpx_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnwpt_Id}, true));
            this.columnlat.AllowDBNull = false;
            this.columnlat.Namespace = "";
            this.columnlon.AllowDBNull = false;
            this.columnlon.Namespace = "";
            this.columnwpt_Id.AutoIncrement = true;
            this.columnwpt_Id.AllowDBNull = false;
            this.columnwpt_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public wptRow NewwptRow() {
            return ((wptRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new wptRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(wptRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.wptRowChanged != null)) {
                this.wptRowChanged(this, new wptRowChangeEvent(((wptRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.wptRowChanging != null)) {
                this.wptRowChanging(this, new wptRowChangeEvent(((wptRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.wptRowDeleted != null)) {
                this.wptRowDeleted(this, new wptRowChangeEvent(((wptRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.wptRowDeleting != null)) {
                this.wptRowDeleting(this, new wptRowChangeEvent(((wptRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovewptRow(wptRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            GPXDataSet ds = new GPXDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "wptDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class rteDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnname;
        
        private global::System.Data.DataColumn columncmt;
        
        private global::System.Data.DataColumn columndesc;
        
        private global::System.Data.DataColumn columnsrc;
        
        private global::System.Data.DataColumn columnnumber;
        
        private global::System.Data.DataColumn columntype;
        
        private global::System.Data.DataColumn columnrte_Id;
        
        private global::System.Data.DataColumn columngpx_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteDataTable() {
            this.TableName = "rte";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal rteDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected rteDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn nameColumn {
            get {
                return this.columnname;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn cmtColumn {
            get {
                return this.columncmt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn descColumn {
            get {
                return this.columndesc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn srcColumn {
            get {
                return this.columnsrc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn numberColumn {
            get {
                return this.columnnumber;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn typeColumn {
            get {
                return this.columntype;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn rte_IdColumn {
            get {
                return this.columnrte_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn gpx_IdColumn {
            get {
                return this.columngpx_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteRow this[int index] {
            get {
                return ((rteRow)(this.Rows[index]));
            }
        }
        
        public event rteRowChangeEventHandler rteRowChanging;
        
        public event rteRowChangeEventHandler rteRowChanged;
        
        public event rteRowChangeEventHandler rteRowDeleting;
        
        public event rteRowChangeEventHandler rteRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddrteRow(rteRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteRow AddrteRow(string name, string cmt, string desc, string src, ulong number, string type, gpxRow parentgpxRowBygpx_rte) {
            rteRow rowrteRow = ((rteRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    name,
                    cmt,
                    desc,
                    src,
                    number,
                    type,
                    null,
                    null};
            if ((parentgpxRowBygpx_rte != null)) {
                columnValuesArray[7] = parentgpxRowBygpx_rte[2];
            }
            rowrteRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowrteRow);
            return rowrteRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            rteDataTable cln = ((rteDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new rteDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnname = base.Columns["name"];
            this.columncmt = base.Columns["cmt"];
            this.columndesc = base.Columns["desc"];
            this.columnsrc = base.Columns["src"];
            this.columnnumber = base.Columns["number"];
            this.columntype = base.Columns["type"];
            this.columnrte_Id = base.Columns["rte_Id"];
            this.columngpx_Id = base.Columns["gpx_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnname);
            this.columncmt = new global::System.Data.DataColumn("cmt", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncmt);
            this.columndesc = new global::System.Data.DataColumn("desc", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columndesc);
            this.columnsrc = new global::System.Data.DataColumn("src", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsrc);
            this.columnnumber = new global::System.Data.DataColumn("number", typeof(ulong), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnnumber);
            this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntype);
            this.columnrte_Id = new global::System.Data.DataColumn("rte_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnrte_Id);
            this.columngpx_Id = new global::System.Data.DataColumn("gpx_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columngpx_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnrte_Id}, true));
            this.columnrte_Id.AutoIncrement = true;
            this.columnrte_Id.AllowDBNull = false;
            this.columnrte_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteRow NewrteRow() {
            return ((rteRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new rteRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(rteRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.rteRowChanged != null)) {
                this.rteRowChanged(this, new rteRowChangeEvent(((rteRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.rteRowChanging != null)) {
                this.rteRowChanging(this, new rteRowChangeEvent(((rteRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.rteRowDeleted != null)) {
                this.rteRowDeleted(this, new rteRowChangeEvent(((rteRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.rteRowDeleting != null)) {
                this.rteRowDeleting(this, new rteRowChangeEvent(((rteRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoverteRow(rteRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            GPXDataSet ds = new GPXDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "rteDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class rteptDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnlat;
        
        private global::System.Data.DataColumn columnlon;
        
        private global::System.Data.DataColumn columnele;
        
        private global::System.Data.DataColumn columntime;
        
        private global::System.Data.DataColumn columnmagvar;
        
        private global::System.Data.DataColumn columngeoidheight;
        
        private global::System.Data.DataColumn columnname;
        
        private global::System.Data.DataColumn columncmt;
        
        private global::System.Data.DataColumn columndesc;
        
        private global::System.Data.DataColumn columnsrc;
        
        private global::System.Data.DataColumn columnsym;
        
        private global::System.Data.DataColumn columntype;
        
        private global::System.Data.DataColumn columnfix;
        
        private global::System.Data.DataColumn columnsat;
        
        private global::System.Data.DataColumn columnhdop;
        
        private global::System.Data.DataColumn columnvdop;
        
        private global::System.Data.DataColumn columnpdop;
        
        private global::System.Data.DataColumn columnageofdgpsdata;
        
        private global::System.Data.DataColumn columndgpsid;
        
        private global::System.Data.DataColumn columnrtept_Id;
        
        private global::System.Data.DataColumn columnrte_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteptDataTable() {
            this.TableName = "rtept";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal rteptDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected rteptDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn latColumn {
            get {
                return this.columnlat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn lonColumn {
            get {
                return this.columnlon;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn eleColumn {
            get {
                return this.columnele;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn timeColumn {
            get {
                return this.columntime;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn magvarColumn {
            get {
                return this.columnmagvar;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn geoidheightColumn {
            get {
                return this.columngeoidheight;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn nameColumn {
            get {
                return this.columnname;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn cmtColumn {
            get {
                return this.columncmt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn descColumn {
            get {
                return this.columndesc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn srcColumn {
            get {
                return this.columnsrc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn symColumn {
            get {
                return this.columnsym;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn typeColumn {
            get {
                return this.columntype;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn fixColumn {
            get {
                return this.columnfix;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn satColumn {
            get {
                return this.columnsat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn hdopColumn {
            get {
                return this.columnhdop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn vdopColumn {
            get {
                return this.columnvdop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn pdopColumn {
            get {
                return this.columnpdop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ageofdgpsdataColumn {
            get {
                return this.columnageofdgpsdata;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn dgpsidColumn {
            get {
                return this.columndgpsid;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn rtept_IdColumn {
            get {
                return this.columnrtept_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn rte_IdColumn {
            get {
                return this.columnrte_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteptRow this[int index] {
            get {
                return ((rteptRow)(this.Rows[index]));
            }
        }
        
        public event rteptRowChangeEventHandler rteptRowChanging;
        
        public event rteptRowChangeEventHandler rteptRowChanged;
        
        public event rteptRowChangeEventHandler rteptRowDeleting;
        
        public event rteptRowChangeEventHandler rteptRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddrteptRow(rteptRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteptRow AddrteptRow(
                    decimal lat, 
                    decimal lon, 
                    decimal ele, 
                    System.DateTime time, 
                    decimal magvar, 
                    decimal geoidheight, 
                    string name, 
                    string cmt, 
                    string desc, 
                    string src, 
                    string sym, 
                    string type, 
                    string fix, 
                    ulong sat, 
                    decimal hdop, 
                    decimal vdop, 
                    decimal pdop, 
                    decimal ageofdgpsdata, 
                    long dgpsid, 
                    rteRow parentrteRowByrte_rtept) {
            rteptRow rowrteptRow = ((rteptRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    lat,
                    lon,
                    ele,
                    time,
                    magvar,
                    geoidheight,
                    name,
                    cmt,
                    desc,
                    src,
                    sym,
                    type,
                    fix,
                    sat,
                    hdop,
                    vdop,
                    pdop,
                    ageofdgpsdata,
                    dgpsid,
                    null,
                    null};
            if ((parentrteRowByrte_rtept != null)) {
                columnValuesArray[20] = parentrteRowByrte_rtept[6];
            }
            rowrteptRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowrteptRow);
            return rowrteptRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            rteptDataTable cln = ((rteptDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new rteptDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnlat = base.Columns["lat"];
            this.columnlon = base.Columns["lon"];
            this.columnele = base.Columns["ele"];
            this.columntime = base.Columns["time"];
            this.columnmagvar = base.Columns["magvar"];
            this.columngeoidheight = base.Columns["geoidheight"];
            this.columnname = base.Columns["name"];
            this.columncmt = base.Columns["cmt"];
            this.columndesc = base.Columns["desc"];
            this.columnsrc = base.Columns["src"];
            this.columnsym = base.Columns["sym"];
            this.columntype = base.Columns["type"];
            this.columnfix = base.Columns["fix"];
            this.columnsat = base.Columns["sat"];
            this.columnhdop = base.Columns["hdop"];
            this.columnvdop = base.Columns["vdop"];
            this.columnpdop = base.Columns["pdop"];
            this.columnageofdgpsdata = base.Columns["ageofdgpsdata"];
            this.columndgpsid = base.Columns["dgpsid"];
            this.columnrtept_Id = base.Columns["rtept_Id"];
            this.columnrte_Id = base.Columns["rte_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnlat = new global::System.Data.DataColumn("lat", typeof(decimal), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnlat);
            this.columnlon = new global::System.Data.DataColumn("lon", typeof(decimal), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnlon);
            this.columnele = new global::System.Data.DataColumn("ele", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnele);
            this.columntime = new global::System.Data.DataColumn("time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntime);
            this.columnmagvar = new global::System.Data.DataColumn("magvar", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnmagvar);
            this.columngeoidheight = new global::System.Data.DataColumn("geoidheight", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columngeoidheight);
            this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnname);
            this.columncmt = new global::System.Data.DataColumn("cmt", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncmt);
            this.columndesc = new global::System.Data.DataColumn("desc", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columndesc);
            this.columnsrc = new global::System.Data.DataColumn("src", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsrc);
            this.columnsym = new global::System.Data.DataColumn("sym", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsym);
            this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntype);
            this.columnfix = new global::System.Data.DataColumn("fix", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnfix);
            this.columnsat = new global::System.Data.DataColumn("sat", typeof(ulong), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsat);
            this.columnhdop = new global::System.Data.DataColumn("hdop", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnhdop);
            this.columnvdop = new global::System.Data.DataColumn("vdop", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnvdop);
            this.columnpdop = new global::System.Data.DataColumn("pdop", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnpdop);
            this.columnageofdgpsdata = new global::System.Data.DataColumn("ageofdgpsdata", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnageofdgpsdata);
            this.columndgpsid = new global::System.Data.DataColumn("dgpsid", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columndgpsid);
            this.columnrtept_Id = new global::System.Data.DataColumn("rtept_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnrtept_Id);
            this.columnrte_Id = new global::System.Data.DataColumn("rte_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnrte_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnrtept_Id}, true));
            this.columnlat.AllowDBNull = false;
            this.columnlat.Namespace = "";
            this.columnlon.AllowDBNull = false;
            this.columnlon.Namespace = "";
            this.columnrtept_Id.AutoIncrement = true;
            this.columnrtept_Id.AllowDBNull = false;
            this.columnrtept_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteptRow NewrteptRow() {
            return ((rteptRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new rteptRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(rteptRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.rteptRowChanged != null)) {
                this.rteptRowChanged(this, new rteptRowChangeEvent(((rteptRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.rteptRowChanging != null)) {
                this.rteptRowChanging(this, new rteptRowChangeEvent(((rteptRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.rteptRowDeleted != null)) {
                this.rteptRowDeleted(this, new rteptRowChangeEvent(((rteptRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.rteptRowDeleting != null)) {
                this.rteptRowDeleting(this, new rteptRowChangeEvent(((rteptRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoverteptRow(rteptRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            GPXDataSet ds = new GPXDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "rteptDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class trkDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnname;
        
        private global::System.Data.DataColumn columncmt;
        
        private global::System.Data.DataColumn columndesc;
        
        private global::System.Data.DataColumn columnsrc;
        
        private global::System.Data.DataColumn columnnumber;
        
        private global::System.Data.DataColumn columntype;
        
        private global::System.Data.DataColumn columntrk_Id;
        
        private global::System.Data.DataColumn columngpx_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkDataTable() {
            this.TableName = "trk";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal trkDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected trkDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn nameColumn {
            get {
                return this.columnname;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn cmtColumn {
            get {
                return this.columncmt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn descColumn {
            get {
                return this.columndesc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn srcColumn {
            get {
                return this.columnsrc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn numberColumn {
            get {
                return this.columnnumber;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn typeColumn {
            get {
                return this.columntype;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn trk_IdColumn {
            get {
                return this.columntrk_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn gpx_IdColumn {
            get {
                return this.columngpx_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkRow this[int index] {
            get {
                return ((trkRow)(this.Rows[index]));
            }
        }
        
        public event trkRowChangeEventHandler trkRowChanging;
        
        public event trkRowChangeEventHandler trkRowChanged;
        
        public event trkRowChangeEventHandler trkRowDeleting;
        
        public event trkRowChangeEventHandler trkRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddtrkRow(trkRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkRow AddtrkRow(string name, string cmt, string desc, string src, ulong number, string type, gpxRow parentgpxRowBygpx_trk) {
            trkRow rowtrkRow = ((trkRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    name,
                    cmt,
                    desc,
                    src,
                    number,
                    type,
                    null,
                    null};
            if ((parentgpxRowBygpx_trk != null)) {
                columnValuesArray[7] = parentgpxRowBygpx_trk[2];
            }
            rowtrkRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowtrkRow);
            return rowtrkRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            trkDataTable cln = ((trkDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new trkDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnname = base.Columns["name"];
            this.columncmt = base.Columns["cmt"];
            this.columndesc = base.Columns["desc"];
            this.columnsrc = base.Columns["src"];
            this.columnnumber = base.Columns["number"];
            this.columntype = base.Columns["type"];
            this.columntrk_Id = base.Columns["trk_Id"];
            this.columngpx_Id = base.Columns["gpx_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnname);
            this.columncmt = new global::System.Data.DataColumn("cmt", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncmt);
            this.columndesc = new global::System.Data.DataColumn("desc", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columndesc);
            this.columnsrc = new global::System.Data.DataColumn("src", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsrc);
            this.columnnumber = new global::System.Data.DataColumn("number", typeof(ulong), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnnumber);
            this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntype);
            this.columntrk_Id = new global::System.Data.DataColumn("trk_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columntrk_Id);
            this.columngpx_Id = new global::System.Data.DataColumn("gpx_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columngpx_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columntrk_Id}, true));
            this.columntrk_Id.AutoIncrement = true;
            this.columntrk_Id.AllowDBNull = false;
            this.columntrk_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkRow NewtrkRow() {
            return ((trkRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new trkRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(trkRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.trkRowChanged != null)) {
                this.trkRowChanged(this, new trkRowChangeEvent(((trkRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.trkRowChanging != null)) {
                this.trkRowChanging(this, new trkRowChangeEvent(((trkRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.trkRowDeleted != null)) {
                this.trkRowDeleted(this, new trkRowChangeEvent(((trkRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.trkRowDeleting != null)) {
                this.trkRowDeleting(this, new trkRowChangeEvent(((trkRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovetrkRow(trkRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            GPXDataSet ds = new GPXDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "trkDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class trksegDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columntrkseg_Id;
        
        private global::System.Data.DataColumn columntrk_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trksegDataTable() {
            this.TableName = "trkseg";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal trksegDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected trksegDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn trkseg_IdColumn {
            get {
                return this.columntrkseg_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn trk_IdColumn {
            get {
                return this.columntrk_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trksegRow this[int index] {
            get {
                return ((trksegRow)(this.Rows[index]));
            }
        }
        
        public event trksegRowChangeEventHandler trksegRowChanging;
        
        public event trksegRowChangeEventHandler trksegRowChanged;
        
        public event trksegRowChangeEventHandler trksegRowDeleting;
        
        public event trksegRowChangeEventHandler trksegRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddtrksegRow(trksegRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trksegRow AddtrksegRow(trkRow parenttrkRowBytrk_trkseg) {
            trksegRow rowtrksegRow = ((trksegRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null};
            if ((parenttrkRowBytrk_trkseg != null)) {
                columnValuesArray[1] = parenttrkRowBytrk_trkseg[6];
            }
            rowtrksegRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowtrksegRow);
            return rowtrksegRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            trksegDataTable cln = ((trksegDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new trksegDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columntrkseg_Id = base.Columns["trkseg_Id"];
            this.columntrk_Id = base.Columns["trk_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columntrkseg_Id = new global::System.Data.DataColumn("trkseg_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columntrkseg_Id);
            this.columntrk_Id = new global::System.Data.DataColumn("trk_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columntrk_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columntrkseg_Id}, true));
            this.columntrkseg_Id.AutoIncrement = true;
            this.columntrkseg_Id.AllowDBNull = false;
            this.columntrkseg_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trksegRow NewtrksegRow() {
            return ((trksegRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new trksegRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(trksegRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.trksegRowChanged != null)) {
                this.trksegRowChanged(this, new trksegRowChangeEvent(((trksegRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.trksegRowChanging != null)) {
                this.trksegRowChanging(this, new trksegRowChangeEvent(((trksegRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.trksegRowDeleted != null)) {
                this.trksegRowDeleted(this, new trksegRowChangeEvent(((trksegRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.trksegRowDeleting != null)) {
                this.trksegRowDeleting(this, new trksegRowChangeEvent(((trksegRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovetrksegRow(trksegRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            GPXDataSet ds = new GPXDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "trksegDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class trkptDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnlat;
        
        private global::System.Data.DataColumn columnlon;
        
        private global::System.Data.DataColumn columnele;
        
        private global::System.Data.DataColumn columntime;
        
        private global::System.Data.DataColumn columnmagvar;
        
        private global::System.Data.DataColumn columngeoidheight;
        
        private global::System.Data.DataColumn columnname;
        
        private global::System.Data.DataColumn columncmt;
        
        private global::System.Data.DataColumn columndesc;
        
        private global::System.Data.DataColumn columnsrc;
        
        private global::System.Data.DataColumn columnsym;
        
        private global::System.Data.DataColumn columntype;
        
        private global::System.Data.DataColumn columnfix;
        
        private global::System.Data.DataColumn columnsat;
        
        private global::System.Data.DataColumn columnhdop;
        
        private global::System.Data.DataColumn columnvdop;
        
        private global::System.Data.DataColumn columnpdop;
        
        private global::System.Data.DataColumn columnageofdgpsdata;
        
        private global::System.Data.DataColumn columndgpsid;
        
        private global::System.Data.DataColumn columntrkpt_Id;
        
        private global::System.Data.DataColumn columntrkseg_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkptDataTable() {
            this.TableName = "trkpt";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal trkptDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected trkptDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn latColumn {
            get {
                return this.columnlat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn lonColumn {
            get {
                return this.columnlon;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn eleColumn {
            get {
                return this.columnele;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn timeColumn {
            get {
                return this.columntime;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn magvarColumn {
            get {
                return this.columnmagvar;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn geoidheightColumn {
            get {
                return this.columngeoidheight;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn nameColumn {
            get {
                return this.columnname;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn cmtColumn {
            get {
                return this.columncmt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn descColumn {
            get {
                return this.columndesc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn srcColumn {
            get {
                return this.columnsrc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn symColumn {
            get {
                return this.columnsym;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn typeColumn {
            get {
                return this.columntype;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn fixColumn {
            get {
                return this.columnfix;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn satColumn {
            get {
                return this.columnsat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn hdopColumn {
            get {
                return this.columnhdop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn vdopColumn {
            get {
                return this.columnvdop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn pdopColumn {
            get {
                return this.columnpdop;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ageofdgpsdataColumn {
            get {
                return this.columnageofdgpsdata;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn dgpsidColumn {
            get {
                return this.columndgpsid;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn trkpt_IdColumn {
            get {
                return this.columntrkpt_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn trkseg_IdColumn {
            get {
                return this.columntrkseg_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkptRow this[int index] {
            get {
                return ((trkptRow)(this.Rows[index]));
            }
        }
        
        public event trkptRowChangeEventHandler trkptRowChanging;
        
        public event trkptRowChangeEventHandler trkptRowChanged;
        
        public event trkptRowChangeEventHandler trkptRowDeleting;
        
        public event trkptRowChangeEventHandler trkptRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddtrkptRow(trkptRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkptRow AddtrkptRow(
                    decimal lat, 
                    decimal lon, 
                    decimal ele, 
                    System.DateTime time, 
                    decimal magvar, 
                    decimal geoidheight, 
                    string name, 
                    string cmt, 
                    string desc, 
                    string src, 
                    string sym, 
                    string type, 
                    string fix, 
                    ulong sat, 
                    decimal hdop, 
                    decimal vdop, 
                    decimal pdop, 
                    decimal ageofdgpsdata, 
                    long dgpsid, 
                    trksegRow parenttrksegRowBytrkseg_trkpt) {
            trkptRow rowtrkptRow = ((trkptRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    lat,
                    lon,
                    ele,
                    time,
                    magvar,
                    geoidheight,
                    name,
                    cmt,
                    desc,
                    src,
                    sym,
                    type,
                    fix,
                    sat,
                    hdop,
                    vdop,
                    pdop,
                    ageofdgpsdata,
                    dgpsid,
                    null,
                    null};
            if ((parenttrksegRowBytrkseg_trkpt != null)) {
                columnValuesArray[20] = parenttrksegRowBytrkseg_trkpt[0];
            }
            rowtrkptRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowtrkptRow);
            return rowtrkptRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            trkptDataTable cln = ((trkptDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new trkptDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnlat = base.Columns["lat"];
            this.columnlon = base.Columns["lon"];
            this.columnele = base.Columns["ele"];
            this.columntime = base.Columns["time"];
            this.columnmagvar = base.Columns["magvar"];
            this.columngeoidheight = base.Columns["geoidheight"];
            this.columnname = base.Columns["name"];
            this.columncmt = base.Columns["cmt"];
            this.columndesc = base.Columns["desc"];
            this.columnsrc = base.Columns["src"];
            this.columnsym = base.Columns["sym"];
            this.columntype = base.Columns["type"];
            this.columnfix = base.Columns["fix"];
            this.columnsat = base.Columns["sat"];
            this.columnhdop = base.Columns["hdop"];
            this.columnvdop = base.Columns["vdop"];
            this.columnpdop = base.Columns["pdop"];
            this.columnageofdgpsdata = base.Columns["ageofdgpsdata"];
            this.columndgpsid = base.Columns["dgpsid"];
            this.columntrkpt_Id = base.Columns["trkpt_Id"];
            this.columntrkseg_Id = base.Columns["trkseg_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnlat = new global::System.Data.DataColumn("lat", typeof(decimal), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnlat);
            this.columnlon = new global::System.Data.DataColumn("lon", typeof(decimal), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnlon);
            this.columnele = new global::System.Data.DataColumn("ele", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnele);
            this.columntime = new global::System.Data.DataColumn("time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntime);
            this.columnmagvar = new global::System.Data.DataColumn("magvar", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnmagvar);
            this.columngeoidheight = new global::System.Data.DataColumn("geoidheight", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columngeoidheight);
            this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnname);
            this.columncmt = new global::System.Data.DataColumn("cmt", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columncmt);
            this.columndesc = new global::System.Data.DataColumn("desc", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columndesc);
            this.columnsrc = new global::System.Data.DataColumn("src", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsrc);
            this.columnsym = new global::System.Data.DataColumn("sym", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsym);
            this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntype);
            this.columnfix = new global::System.Data.DataColumn("fix", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnfix);
            this.columnsat = new global::System.Data.DataColumn("sat", typeof(ulong), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsat);
            this.columnhdop = new global::System.Data.DataColumn("hdop", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnhdop);
            this.columnvdop = new global::System.Data.DataColumn("vdop", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnvdop);
            this.columnpdop = new global::System.Data.DataColumn("pdop", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnpdop);
            this.columnageofdgpsdata = new global::System.Data.DataColumn("ageofdgpsdata", typeof(decimal), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnageofdgpsdata);
            this.columndgpsid = new global::System.Data.DataColumn("dgpsid", typeof(long), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columndgpsid);
            this.columntrkpt_Id = new global::System.Data.DataColumn("trkpt_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columntrkpt_Id);
            this.columntrkseg_Id = new global::System.Data.DataColumn("trkseg_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columntrkseg_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columntrkpt_Id}, true));
            this.columnlat.AllowDBNull = false;
            this.columnlat.Namespace = "";
            this.columnlon.AllowDBNull = false;
            this.columnlon.Namespace = "";
            this.columntrkpt_Id.AutoIncrement = true;
            this.columntrkpt_Id.AllowDBNull = false;
            this.columntrkpt_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkptRow NewtrkptRow() {
            return ((trkptRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new trkptRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(trkptRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.trkptRowChanged != null)) {
                this.trkptRowChanged(this, new trkptRowChangeEvent(((trkptRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.trkptRowChanging != null)) {
                this.trkptRowChanging(this, new trkptRowChangeEvent(((trkptRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.trkptRowDeleted != null)) {
                this.trkptRowDeleted(this, new trkptRowChangeEvent(((trkptRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.trkptRowDeleting != null)) {
                this.trkptRowDeleting(this, new trkptRowChangeEvent(((trkptRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovetrkptRow(trkptRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            GPXDataSet ds = new GPXDataSet();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "trkptDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class gpxRow : global::System.Data.DataRow {
        
        private gpxDataTable tablegpx;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal gpxRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablegpx = ((gpxDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string version {
            get {
                return ((string)(this[this.tablegpx.versionColumn]));
            }
            set {
                this[this.tablegpx.versionColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string creator {
            get {
                return ((string)(this[this.tablegpx.creatorColumn]));
            }
            set {
                this[this.tablegpx.creatorColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int gpx_Id {
            get {
                return ((int)(this[this.tablegpx.gpx_IdColumn]));
            }
            set {
                this[this.tablegpx.gpx_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public metadataRow[] GetmetadataRows() {
            if ((this.Table.ChildRelations["gpx_metadata"] == null)) {
                return new metadataRow[0];
            }
            else {
                return ((metadataRow[])(base.GetChildRows(this.Table.ChildRelations["gpx_metadata"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public wptRow[] GetwptRows() {
            if ((this.Table.ChildRelations["gpx_wpt"] == null)) {
                return new wptRow[0];
            }
            else {
                return ((wptRow[])(base.GetChildRows(this.Table.ChildRelations["gpx_wpt"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteRow[] GetrteRows() {
            if ((this.Table.ChildRelations["gpx_rte"] == null)) {
                return new rteRow[0];
            }
            else {
                return ((rteRow[])(base.GetChildRows(this.Table.ChildRelations["gpx_rte"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkRow[] GettrkRows() {
            if ((this.Table.ChildRelations["gpx_trk"] == null)) {
                return new trkRow[0];
            }
            else {
                return ((trkRow[])(base.GetChildRows(this.Table.ChildRelations["gpx_trk"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public extensionsRow[] GetextensionsRows() {
            if ((this.Table.ChildRelations["gpx_extensions"] == null)) {
                return new extensionsRow[0];
            }
            else {
                return ((extensionsRow[])(base.GetChildRows(this.Table.ChildRelations["gpx_extensions"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class metadataRow : global::System.Data.DataRow {
        
        private metadataDataTable tablemetadata;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal metadataRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablemetadata = ((metadataDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string name {
            get {
                try {
                    return ((string)(this[this.tablemetadata.nameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'metadata\' is DBNull.", e);
                }
            }
            set {
                this[this.tablemetadata.nameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string desc {
            get {
                try {
                    return ((string)(this[this.tablemetadata.descColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'desc\' in table \'metadata\' is DBNull.", e);
                }
            }
            set {
                this[this.tablemetadata.descColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime time {
            get {
                try {
                    return ((global::System.DateTime)(this[this.tablemetadata.timeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'time\' in table \'metadata\' is DBNull.", e);
                }
            }
            set {
                this[this.tablemetadata.timeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string keywords {
            get {
                try {
                    return ((string)(this[this.tablemetadata.keywordsColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'keywords\' in table \'metadata\' is DBNull.", e);
                }
            }
            set {
                this[this.tablemetadata.keywordsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int metadata_Id {
            get {
                return ((int)(this[this.tablemetadata.metadata_IdColumn]));
            }
            set {
                this[this.tablemetadata.metadata_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int gpx_Id {
            get {
                try {
                    return ((int)(this[this.tablemetadata.gpx_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'gpx_Id\' in table \'metadata\' is DBNull.", e);
                }
            }
            set {
                this[this.tablemetadata.gpx_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public gpxRow gpxRow {
            get {
                return ((gpxRow)(this.GetParentRow(this.Table.ParentRelations["gpx_metadata"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["gpx_metadata"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsnameNull() {
            return this.IsNull(this.tablemetadata.nameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetnameNull() {
            this[this.tablemetadata.nameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsdescNull() {
            return this.IsNull(this.tablemetadata.descColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetdescNull() {
            this[this.tablemetadata.descColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstimeNull() {
            return this.IsNull(this.tablemetadata.timeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettimeNull() {
            this[this.tablemetadata.timeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IskeywordsNull() {
            return this.IsNull(this.tablemetadata.keywordsColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetkeywordsNull() {
            this[this.tablemetadata.keywordsColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isgpx_IdNull() {
            return this.IsNull(this.tablemetadata.gpx_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setgpx_IdNull() {
            this[this.tablemetadata.gpx_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public authorRow[] GetauthorRows() {
            if ((this.Table.ChildRelations["metadata_author"] == null)) {
                return new authorRow[0];
            }
            else {
                return ((authorRow[])(base.GetChildRows(this.Table.ChildRelations["metadata_author"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public copyrightRow[] GetcopyrightRows() {
            if ((this.Table.ChildRelations["metadata_copyright"] == null)) {
                return new copyrightRow[0];
            }
            else {
                return ((copyrightRow[])(base.GetChildRows(this.Table.ChildRelations["metadata_copyright"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public linkRow[] GetlinkRows() {
            if ((this.Table.ChildRelations["metadata_link"] == null)) {
                return new linkRow[0];
            }
            else {
                return ((linkRow[])(base.GetChildRows(this.Table.ChildRelations["metadata_link"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public boundsRow[] GetboundsRows() {
            if ((this.Table.ChildRelations["metadata_bounds"] == null)) {
                return new boundsRow[0];
            }
            else {
                return ((boundsRow[])(base.GetChildRows(this.Table.ChildRelations["metadata_bounds"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public extensionsRow[] GetextensionsRows() {
            if ((this.Table.ChildRelations["metadata_extensions"] == null)) {
                return new extensionsRow[0];
            }
            else {
                return ((extensionsRow[])(base.GetChildRows(this.Table.ChildRelations["metadata_extensions"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class authorRow : global::System.Data.DataRow {
        
        private authorDataTable tableauthor;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal authorRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableauthor = ((authorDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string name {
            get {
                try {
                    return ((string)(this[this.tableauthor.nameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'author\' is DBNull.", e);
                }
            }
            set {
                this[this.tableauthor.nameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int author_Id {
            get {
                return ((int)(this[this.tableauthor.author_IdColumn]));
            }
            set {
                this[this.tableauthor.author_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int metadata_Id {
            get {
                try {
                    return ((int)(this[this.tableauthor.metadata_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'metadata_Id\' in table \'author\' is DBNull.", e);
                }
            }
            set {
                this[this.tableauthor.metadata_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public metadataRow metadataRow {
            get {
                return ((metadataRow)(this.GetParentRow(this.Table.ParentRelations["metadata_author"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["metadata_author"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsnameNull() {
            return this.IsNull(this.tableauthor.nameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetnameNull() {
            this[this.tableauthor.nameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Ismetadata_IdNull() {
            return this.IsNull(this.tableauthor.metadata_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setmetadata_IdNull() {
            this[this.tableauthor.metadata_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public emailRow[] GetemailRows() {
            if ((this.Table.ChildRelations["author_email"] == null)) {
                return new emailRow[0];
            }
            else {
                return ((emailRow[])(base.GetChildRows(this.Table.ChildRelations["author_email"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public linkRow[] GetlinkRows() {
            if ((this.Table.ChildRelations["author_link"] == null)) {
                return new linkRow[0];
            }
            else {
                return ((linkRow[])(base.GetChildRows(this.Table.ChildRelations["author_link"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class emailRow : global::System.Data.DataRow {
        
        private emailDataTable tableemail;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal emailRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableemail = ((emailDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string id {
            get {
                return ((string)(this[this.tableemail.idColumn]));
            }
            set {
                this[this.tableemail.idColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string domain {
            get {
                return ((string)(this[this.tableemail.domainColumn]));
            }
            set {
                this[this.tableemail.domainColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int author_Id {
            get {
                try {
                    return ((int)(this[this.tableemail.author_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'author_Id\' in table \'email\' is DBNull.", e);
                }
            }
            set {
                this[this.tableemail.author_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public authorRow authorRow {
            get {
                return ((authorRow)(this.GetParentRow(this.Table.ParentRelations["author_email"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["author_email"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isauthor_IdNull() {
            return this.IsNull(this.tableemail.author_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setauthor_IdNull() {
            this[this.tableemail.author_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class linkRow : global::System.Data.DataRow {
        
        private linkDataTable tablelink;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal linkRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablelink = ((linkDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Uri href {
            get {
                return ((global::System.Uri)(this[this.tablelink.hrefColumn]));
            }
            set {
                this[this.tablelink.hrefColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string text {
            get {
                try {
                    return ((string)(this[this.tablelink.textColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'text\' in table \'link\' is DBNull.", e);
                }
            }
            set {
                this[this.tablelink.textColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string type {
            get {
                try {
                    return ((string)(this[this.tablelink.typeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'link\' is DBNull.", e);
                }
            }
            set {
                this[this.tablelink.typeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int author_Id {
            get {
                try {
                    return ((int)(this[this.tablelink.author_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'author_Id\' in table \'link\' is DBNull.", e);
                }
            }
            set {
                this[this.tablelink.author_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int metadata_Id {
            get {
                try {
                    return ((int)(this[this.tablelink.metadata_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'metadata_Id\' in table \'link\' is DBNull.", e);
                }
            }
            set {
                this[this.tablelink.metadata_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int wpt_Id {
            get {
                try {
                    return ((int)(this[this.tablelink.wpt_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'wpt_Id\' in table \'link\' is DBNull.", e);
                }
            }
            set {
                this[this.tablelink.wpt_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int rtept_Id {
            get {
                try {
                    return ((int)(this[this.tablelink.rtept_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'rtept_Id\' in table \'link\' is DBNull.", e);
                }
            }
            set {
                this[this.tablelink.rtept_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int rte_Id {
            get {
                try {
                    return ((int)(this[this.tablelink.rte_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'rte_Id\' in table \'link\' is DBNull.", e);
                }
            }
            set {
                this[this.tablelink.rte_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int trkpt_Id {
            get {
                try {
                    return ((int)(this[this.tablelink.trkpt_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'trkpt_Id\' in table \'link\' is DBNull.", e);
                }
            }
            set {
                this[this.tablelink.trkpt_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int trk_Id {
            get {
                try {
                    return ((int)(this[this.tablelink.trk_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'trk_Id\' in table \'link\' is DBNull.", e);
                }
            }
            set {
                this[this.tablelink.trk_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public authorRow authorRow {
            get {
                return ((authorRow)(this.GetParentRow(this.Table.ParentRelations["author_link"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["author_link"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public metadataRow metadataRow {
            get {
                return ((metadataRow)(this.GetParentRow(this.Table.ParentRelations["metadata_link"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["metadata_link"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public wptRow wptRow {
            get {
                return ((wptRow)(this.GetParentRow(this.Table.ParentRelations["wpt_link"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["wpt_link"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteptRow rteptRow {
            get {
                return ((rteptRow)(this.GetParentRow(this.Table.ParentRelations["rtept_link"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["rtept_link"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteRow rteRow {
            get {
                return ((rteRow)(this.GetParentRow(this.Table.ParentRelations["rte_link"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["rte_link"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkptRow trkptRow {
            get {
                return ((trkptRow)(this.GetParentRow(this.Table.ParentRelations["trkpt_link"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["trkpt_link"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkRow trkRow {
            get {
                return ((trkRow)(this.GetParentRow(this.Table.ParentRelations["trk_link"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["trk_link"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstextNull() {
            return this.IsNull(this.tablelink.textColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettextNull() {
            this[this.tablelink.textColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstypeNull() {
            return this.IsNull(this.tablelink.typeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettypeNull() {
            this[this.tablelink.typeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isauthor_IdNull() {
            return this.IsNull(this.tablelink.author_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setauthor_IdNull() {
            this[this.tablelink.author_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Ismetadata_IdNull() {
            return this.IsNull(this.tablelink.metadata_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setmetadata_IdNull() {
            this[this.tablelink.metadata_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Iswpt_IdNull() {
            return this.IsNull(this.tablelink.wpt_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setwpt_IdNull() {
            this[this.tablelink.wpt_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isrtept_IdNull() {
            return this.IsNull(this.tablelink.rtept_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setrtept_IdNull() {
            this[this.tablelink.rtept_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isrte_IdNull() {
            return this.IsNull(this.tablelink.rte_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setrte_IdNull() {
            this[this.tablelink.rte_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Istrkpt_IdNull() {
            return this.IsNull(this.tablelink.trkpt_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Settrkpt_IdNull() {
            this[this.tablelink.trkpt_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Istrk_IdNull() {
            return this.IsNull(this.tablelink.trk_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Settrk_IdNull() {
            this[this.tablelink.trk_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class copyrightRow : global::System.Data.DataRow {
        
        private copyrightDataTable tablecopyright;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal copyrightRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablecopyright = ((copyrightDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string author {
            get {
                return ((string)(this[this.tablecopyright.authorColumn]));
            }
            set {
                this[this.tablecopyright.authorColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime year {
            get {
                try {
                    return ((global::System.DateTime)(this[this.tablecopyright.yearColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'year\' in table \'copyright\' is DBNull.", e);
                }
            }
            set {
                this[this.tablecopyright.yearColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Uri license {
            get {
                try {
                    return ((global::System.Uri)(this[this.tablecopyright.licenseColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'license\' in table \'copyright\' is DBNull.", e);
                }
            }
            set {
                this[this.tablecopyright.licenseColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int metadata_Id {
            get {
                try {
                    return ((int)(this[this.tablecopyright.metadata_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'metadata_Id\' in table \'copyright\' is DBNull.", e);
                }
            }
            set {
                this[this.tablecopyright.metadata_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public metadataRow metadataRow {
            get {
                return ((metadataRow)(this.GetParentRow(this.Table.ParentRelations["metadata_copyright"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["metadata_copyright"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsyearNull() {
            return this.IsNull(this.tablecopyright.yearColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetyearNull() {
            this[this.tablecopyright.yearColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IslicenseNull() {
            return this.IsNull(this.tablecopyright.licenseColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetlicenseNull() {
            this[this.tablecopyright.licenseColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Ismetadata_IdNull() {
            return this.IsNull(this.tablecopyright.metadata_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setmetadata_IdNull() {
            this[this.tablecopyright.metadata_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class boundsRow : global::System.Data.DataRow {
        
        private boundsDataTable tablebounds;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal boundsRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablebounds = ((boundsDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal minlat {
            get {
                return ((decimal)(this[this.tablebounds.minlatColumn]));
            }
            set {
                this[this.tablebounds.minlatColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal minlon {
            get {
                return ((decimal)(this[this.tablebounds.minlonColumn]));
            }
            set {
                this[this.tablebounds.minlonColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal maxlat {
            get {
                return ((decimal)(this[this.tablebounds.maxlatColumn]));
            }
            set {
                this[this.tablebounds.maxlatColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal maxlon {
            get {
                return ((decimal)(this[this.tablebounds.maxlonColumn]));
            }
            set {
                this[this.tablebounds.maxlonColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int metadata_Id {
            get {
                try {
                    return ((int)(this[this.tablebounds.metadata_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'metadata_Id\' in table \'bounds\' is DBNull.", e);
                }
            }
            set {
                this[this.tablebounds.metadata_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public metadataRow metadataRow {
            get {
                return ((metadataRow)(this.GetParentRow(this.Table.ParentRelations["metadata_bounds"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["metadata_bounds"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Ismetadata_IdNull() {
            return this.IsNull(this.tablebounds.metadata_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setmetadata_IdNull() {
            this[this.tablebounds.metadata_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class extensionsRow : global::System.Data.DataRow {
        
        private extensionsDataTable tableextensions;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal extensionsRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableextensions = ((extensionsDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int metadata_Id {
            get {
                try {
                    return ((int)(this[this.tableextensions.metadata_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'metadata_Id\' in table \'extensions\' is DBNull.", e);
                }
            }
            set {
                this[this.tableextensions.metadata_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int wpt_Id {
            get {
                try {
                    return ((int)(this[this.tableextensions.wpt_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'wpt_Id\' in table \'extensions\' is DBNull.", e);
                }
            }
            set {
                this[this.tableextensions.wpt_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int rtept_Id {
            get {
                try {
                    return ((int)(this[this.tableextensions.rtept_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'rtept_Id\' in table \'extensions\' is DBNull.", e);
                }
            }
            set {
                this[this.tableextensions.rtept_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int rte_Id {
            get {
                try {
                    return ((int)(this[this.tableextensions.rte_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'rte_Id\' in table \'extensions\' is DBNull.", e);
                }
            }
            set {
                this[this.tableextensions.rte_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int trkpt_Id {
            get {
                try {
                    return ((int)(this[this.tableextensions.trkpt_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'trkpt_Id\' in table \'extensions\' is DBNull.", e);
                }
            }
            set {
                this[this.tableextensions.trkpt_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int trkseg_Id {
            get {
                try {
                    return ((int)(this[this.tableextensions.trkseg_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'trkseg_Id\' in table \'extensions\' is DBNull.", e);
                }
            }
            set {
                this[this.tableextensions.trkseg_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int trk_Id {
            get {
                try {
                    return ((int)(this[this.tableextensions.trk_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'trk_Id\' in table \'extensions\' is DBNull.", e);
                }
            }
            set {
                this[this.tableextensions.trk_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int gpx_Id {
            get {
                try {
                    return ((int)(this[this.tableextensions.gpx_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'gpx_Id\' in table \'extensions\' is DBNull.", e);
                }
            }
            set {
                this[this.tableextensions.gpx_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public metadataRow metadataRow {
            get {
                return ((metadataRow)(this.GetParentRow(this.Table.ParentRelations["metadata_extensions"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["metadata_extensions"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public wptRow wptRow {
            get {
                return ((wptRow)(this.GetParentRow(this.Table.ParentRelations["wpt_extensions"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["wpt_extensions"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteptRow rteptRow {
            get {
                return ((rteptRow)(this.GetParentRow(this.Table.ParentRelations["rtept_extensions"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["rtept_extensions"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteRow rteRow {
            get {
                return ((rteRow)(this.GetParentRow(this.Table.ParentRelations["rte_extensions"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["rte_extensions"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkptRow trkptRow {
            get {
                return ((trkptRow)(this.GetParentRow(this.Table.ParentRelations["trkpt_extensions"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["trkpt_extensions"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trksegRow trksegRow {
            get {
                return ((trksegRow)(this.GetParentRow(this.Table.ParentRelations["trkseg_extensions"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["trkseg_extensions"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkRow trkRow {
            get {
                return ((trkRow)(this.GetParentRow(this.Table.ParentRelations["trk_extensions"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["trk_extensions"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public gpxRow gpxRow {
            get {
                return ((gpxRow)(this.GetParentRow(this.Table.ParentRelations["gpx_extensions"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["gpx_extensions"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Ismetadata_IdNull() {
            return this.IsNull(this.tableextensions.metadata_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setmetadata_IdNull() {
            this[this.tableextensions.metadata_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Iswpt_IdNull() {
            return this.IsNull(this.tableextensions.wpt_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setwpt_IdNull() {
            this[this.tableextensions.wpt_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isrtept_IdNull() {
            return this.IsNull(this.tableextensions.rtept_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setrtept_IdNull() {
            this[this.tableextensions.rtept_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isrte_IdNull() {
            return this.IsNull(this.tableextensions.rte_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setrte_IdNull() {
            this[this.tableextensions.rte_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Istrkpt_IdNull() {
            return this.IsNull(this.tableextensions.trkpt_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Settrkpt_IdNull() {
            this[this.tableextensions.trkpt_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Istrkseg_IdNull() {
            return this.IsNull(this.tableextensions.trkseg_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Settrkseg_IdNull() {
            this[this.tableextensions.trkseg_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Istrk_IdNull() {
            return this.IsNull(this.tableextensions.trk_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Settrk_IdNull() {
            this[this.tableextensions.trk_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isgpx_IdNull() {
            return this.IsNull(this.tableextensions.gpx_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setgpx_IdNull() {
            this[this.tableextensions.gpx_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class wptRow : global::System.Data.DataRow {
        
        private wptDataTable tablewpt;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal wptRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablewpt = ((wptDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal lat {
            get {
                return ((decimal)(this[this.tablewpt.latColumn]));
            }
            set {
                this[this.tablewpt.latColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal lon {
            get {
                return ((decimal)(this[this.tablewpt.lonColumn]));
            }
            set {
                this[this.tablewpt.lonColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal ele {
            get {
                try {
                    return ((decimal)(this[this.tablewpt.eleColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ele\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.eleColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime time {
            get {
                try {
                    return ((global::System.DateTime)(this[this.tablewpt.timeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'time\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.timeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal magvar {
            get {
                try {
                    return ((decimal)(this[this.tablewpt.magvarColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'magvar\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.magvarColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal geoidheight {
            get {
                try {
                    return ((decimal)(this[this.tablewpt.geoidheightColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'geoidheight\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.geoidheightColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string name {
            get {
                try {
                    return ((string)(this[this.tablewpt.nameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.nameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string cmt {
            get {
                try {
                    return ((string)(this[this.tablewpt.cmtColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'cmt\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.cmtColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string desc {
            get {
                try {
                    return ((string)(this[this.tablewpt.descColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'desc\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.descColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string src {
            get {
                try {
                    return ((string)(this[this.tablewpt.srcColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'src\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.srcColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sym {
            get {
                try {
                    return ((string)(this[this.tablewpt.symColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sym\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.symColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string type {
            get {
                try {
                    return ((string)(this[this.tablewpt.typeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.typeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string fix {
            get {
                try {
                    return ((string)(this[this.tablewpt.fixColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'fix\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.fixColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ulong sat {
            get {
                try {
                    return ((ulong)(this[this.tablewpt.satColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sat\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.satColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal hdop {
            get {
                try {
                    return ((decimal)(this[this.tablewpt.hdopColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'hdop\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.hdopColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal vdop {
            get {
                try {
                    return ((decimal)(this[this.tablewpt.vdopColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'vdop\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.vdopColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal pdop {
            get {
                try {
                    return ((decimal)(this[this.tablewpt.pdopColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'pdop\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.pdopColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal ageofdgpsdata {
            get {
                try {
                    return ((decimal)(this[this.tablewpt.ageofdgpsdataColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ageofdgpsdata\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.ageofdgpsdataColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public long dgpsid {
            get {
                try {
                    return ((long)(this[this.tablewpt.dgpsidColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'dgpsid\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.dgpsidColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int wpt_Id {
            get {
                return ((int)(this[this.tablewpt.wpt_IdColumn]));
            }
            set {
                this[this.tablewpt.wpt_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int gpx_Id {
            get {
                try {
                    return ((int)(this[this.tablewpt.gpx_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'gpx_Id\' in table \'wpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tablewpt.gpx_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public gpxRow gpxRow {
            get {
                return ((gpxRow)(this.GetParentRow(this.Table.ParentRelations["gpx_wpt"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["gpx_wpt"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IseleNull() {
            return this.IsNull(this.tablewpt.eleColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SeteleNull() {
            this[this.tablewpt.eleColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstimeNull() {
            return this.IsNull(this.tablewpt.timeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettimeNull() {
            this[this.tablewpt.timeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsmagvarNull() {
            return this.IsNull(this.tablewpt.magvarColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetmagvarNull() {
            this[this.tablewpt.magvarColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsgeoidheightNull() {
            return this.IsNull(this.tablewpt.geoidheightColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetgeoidheightNull() {
            this[this.tablewpt.geoidheightColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsnameNull() {
            return this.IsNull(this.tablewpt.nameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetnameNull() {
            this[this.tablewpt.nameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IscmtNull() {
            return this.IsNull(this.tablewpt.cmtColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetcmtNull() {
            this[this.tablewpt.cmtColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsdescNull() {
            return this.IsNull(this.tablewpt.descColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetdescNull() {
            this[this.tablewpt.descColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssrcNull() {
            return this.IsNull(this.tablewpt.srcColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsrcNull() {
            this[this.tablewpt.srcColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssymNull() {
            return this.IsNull(this.tablewpt.symColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsymNull() {
            this[this.tablewpt.symColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstypeNull() {
            return this.IsNull(this.tablewpt.typeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettypeNull() {
            this[this.tablewpt.typeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsfixNull() {
            return this.IsNull(this.tablewpt.fixColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetfixNull() {
            this[this.tablewpt.fixColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssatNull() {
            return this.IsNull(this.tablewpt.satColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsatNull() {
            this[this.tablewpt.satColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IshdopNull() {
            return this.IsNull(this.tablewpt.hdopColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SethdopNull() {
            this[this.tablewpt.hdopColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsvdopNull() {
            return this.IsNull(this.tablewpt.vdopColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetvdopNull() {
            this[this.tablewpt.vdopColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IspdopNull() {
            return this.IsNull(this.tablewpt.pdopColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetpdopNull() {
            this[this.tablewpt.pdopColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsageofdgpsdataNull() {
            return this.IsNull(this.tablewpt.ageofdgpsdataColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetageofdgpsdataNull() {
            this[this.tablewpt.ageofdgpsdataColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsdgpsidNull() {
            return this.IsNull(this.tablewpt.dgpsidColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetdgpsidNull() {
            this[this.tablewpt.dgpsidColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isgpx_IdNull() {
            return this.IsNull(this.tablewpt.gpx_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setgpx_IdNull() {
            this[this.tablewpt.gpx_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public linkRow[] GetlinkRows() {
            if ((this.Table.ChildRelations["wpt_link"] == null)) {
                return new linkRow[0];
            }
            else {
                return ((linkRow[])(base.GetChildRows(this.Table.ChildRelations["wpt_link"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public extensionsRow[] GetextensionsRows() {
            if ((this.Table.ChildRelations["wpt_extensions"] == null)) {
                return new extensionsRow[0];
            }
            else {
                return ((extensionsRow[])(base.GetChildRows(this.Table.ChildRelations["wpt_extensions"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class rteRow : global::System.Data.DataRow {
        
        private rteDataTable tablerte;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal rteRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablerte = ((rteDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string name {
            get {
                try {
                    return ((string)(this[this.tablerte.nameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'rte\' is DBNull.", e);
                }
            }
            set {
                this[this.tablerte.nameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string cmt {
            get {
                try {
                    return ((string)(this[this.tablerte.cmtColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'cmt\' in table \'rte\' is DBNull.", e);
                }
            }
            set {
                this[this.tablerte.cmtColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string desc {
            get {
                try {
                    return ((string)(this[this.tablerte.descColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'desc\' in table \'rte\' is DBNull.", e);
                }
            }
            set {
                this[this.tablerte.descColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string src {
            get {
                try {
                    return ((string)(this[this.tablerte.srcColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'src\' in table \'rte\' is DBNull.", e);
                }
            }
            set {
                this[this.tablerte.srcColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ulong number {
            get {
                try {
                    return ((ulong)(this[this.tablerte.numberColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'number\' in table \'rte\' is DBNull.", e);
                }
            }
            set {
                this[this.tablerte.numberColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string type {
            get {
                try {
                    return ((string)(this[this.tablerte.typeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'rte\' is DBNull.", e);
                }
            }
            set {
                this[this.tablerte.typeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int rte_Id {
            get {
                return ((int)(this[this.tablerte.rte_IdColumn]));
            }
            set {
                this[this.tablerte.rte_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int gpx_Id {
            get {
                try {
                    return ((int)(this[this.tablerte.gpx_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'gpx_Id\' in table \'rte\' is DBNull.", e);
                }
            }
            set {
                this[this.tablerte.gpx_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public gpxRow gpxRow {
            get {
                return ((gpxRow)(this.GetParentRow(this.Table.ParentRelations["gpx_rte"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["gpx_rte"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsnameNull() {
            return this.IsNull(this.tablerte.nameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetnameNull() {
            this[this.tablerte.nameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IscmtNull() {
            return this.IsNull(this.tablerte.cmtColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetcmtNull() {
            this[this.tablerte.cmtColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsdescNull() {
            return this.IsNull(this.tablerte.descColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetdescNull() {
            this[this.tablerte.descColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssrcNull() {
            return this.IsNull(this.tablerte.srcColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsrcNull() {
            this[this.tablerte.srcColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsnumberNull() {
            return this.IsNull(this.tablerte.numberColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetnumberNull() {
            this[this.tablerte.numberColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstypeNull() {
            return this.IsNull(this.tablerte.typeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettypeNull() {
            this[this.tablerte.typeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isgpx_IdNull() {
            return this.IsNull(this.tablerte.gpx_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setgpx_IdNull() {
            this[this.tablerte.gpx_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public linkRow[] GetlinkRows() {
            if ((this.Table.ChildRelations["rte_link"] == null)) {
                return new linkRow[0];
            }
            else {
                return ((linkRow[])(base.GetChildRows(this.Table.ChildRelations["rte_link"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public extensionsRow[] GetextensionsRows() {
            if ((this.Table.ChildRelations["rte_extensions"] == null)) {
                return new extensionsRow[0];
            }
            else {
                return ((extensionsRow[])(base.GetChildRows(this.Table.ChildRelations["rte_extensions"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteptRow[] GetrteptRows() {
            if ((this.Table.ChildRelations["rte_rtept"] == null)) {
                return new rteptRow[0];
            }
            else {
                return ((rteptRow[])(base.GetChildRows(this.Table.ChildRelations["rte_rtept"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class rteptRow : global::System.Data.DataRow {
        
        private rteptDataTable tablertept;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal rteptRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablertept = ((rteptDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal lat {
            get {
                return ((decimal)(this[this.tablertept.latColumn]));
            }
            set {
                this[this.tablertept.latColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal lon {
            get {
                return ((decimal)(this[this.tablertept.lonColumn]));
            }
            set {
                this[this.tablertept.lonColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal ele {
            get {
                try {
                    return ((decimal)(this[this.tablertept.eleColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ele\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.eleColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime time {
            get {
                try {
                    return ((global::System.DateTime)(this[this.tablertept.timeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'time\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.timeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal magvar {
            get {
                try {
                    return ((decimal)(this[this.tablertept.magvarColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'magvar\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.magvarColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal geoidheight {
            get {
                try {
                    return ((decimal)(this[this.tablertept.geoidheightColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'geoidheight\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.geoidheightColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string name {
            get {
                try {
                    return ((string)(this[this.tablertept.nameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.nameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string cmt {
            get {
                try {
                    return ((string)(this[this.tablertept.cmtColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'cmt\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.cmtColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string desc {
            get {
                try {
                    return ((string)(this[this.tablertept.descColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'desc\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.descColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string src {
            get {
                try {
                    return ((string)(this[this.tablertept.srcColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'src\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.srcColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sym {
            get {
                try {
                    return ((string)(this[this.tablertept.symColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sym\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.symColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string type {
            get {
                try {
                    return ((string)(this[this.tablertept.typeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.typeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string fix {
            get {
                try {
                    return ((string)(this[this.tablertept.fixColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'fix\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.fixColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ulong sat {
            get {
                try {
                    return ((ulong)(this[this.tablertept.satColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sat\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.satColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal hdop {
            get {
                try {
                    return ((decimal)(this[this.tablertept.hdopColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'hdop\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.hdopColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal vdop {
            get {
                try {
                    return ((decimal)(this[this.tablertept.vdopColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'vdop\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.vdopColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal pdop {
            get {
                try {
                    return ((decimal)(this[this.tablertept.pdopColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'pdop\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.pdopColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal ageofdgpsdata {
            get {
                try {
                    return ((decimal)(this[this.tablertept.ageofdgpsdataColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ageofdgpsdata\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.ageofdgpsdataColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public long dgpsid {
            get {
                try {
                    return ((long)(this[this.tablertept.dgpsidColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'dgpsid\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.dgpsidColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int rtept_Id {
            get {
                return ((int)(this[this.tablertept.rtept_IdColumn]));
            }
            set {
                this[this.tablertept.rtept_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int rte_Id {
            get {
                try {
                    return ((int)(this[this.tablertept.rte_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'rte_Id\' in table \'rtept\' is DBNull.", e);
                }
            }
            set {
                this[this.tablertept.rte_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteRow rteRow {
            get {
                return ((rteRow)(this.GetParentRow(this.Table.ParentRelations["rte_rtept"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["rte_rtept"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IseleNull() {
            return this.IsNull(this.tablertept.eleColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SeteleNull() {
            this[this.tablertept.eleColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstimeNull() {
            return this.IsNull(this.tablertept.timeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettimeNull() {
            this[this.tablertept.timeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsmagvarNull() {
            return this.IsNull(this.tablertept.magvarColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetmagvarNull() {
            this[this.tablertept.magvarColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsgeoidheightNull() {
            return this.IsNull(this.tablertept.geoidheightColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetgeoidheightNull() {
            this[this.tablertept.geoidheightColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsnameNull() {
            return this.IsNull(this.tablertept.nameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetnameNull() {
            this[this.tablertept.nameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IscmtNull() {
            return this.IsNull(this.tablertept.cmtColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetcmtNull() {
            this[this.tablertept.cmtColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsdescNull() {
            return this.IsNull(this.tablertept.descColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetdescNull() {
            this[this.tablertept.descColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssrcNull() {
            return this.IsNull(this.tablertept.srcColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsrcNull() {
            this[this.tablertept.srcColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssymNull() {
            return this.IsNull(this.tablertept.symColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsymNull() {
            this[this.tablertept.symColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstypeNull() {
            return this.IsNull(this.tablertept.typeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettypeNull() {
            this[this.tablertept.typeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsfixNull() {
            return this.IsNull(this.tablertept.fixColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetfixNull() {
            this[this.tablertept.fixColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssatNull() {
            return this.IsNull(this.tablertept.satColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsatNull() {
            this[this.tablertept.satColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IshdopNull() {
            return this.IsNull(this.tablertept.hdopColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SethdopNull() {
            this[this.tablertept.hdopColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsvdopNull() {
            return this.IsNull(this.tablertept.vdopColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetvdopNull() {
            this[this.tablertept.vdopColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IspdopNull() {
            return this.IsNull(this.tablertept.pdopColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetpdopNull() {
            this[this.tablertept.pdopColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsageofdgpsdataNull() {
            return this.IsNull(this.tablertept.ageofdgpsdataColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetageofdgpsdataNull() {
            this[this.tablertept.ageofdgpsdataColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsdgpsidNull() {
            return this.IsNull(this.tablertept.dgpsidColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetdgpsidNull() {
            this[this.tablertept.dgpsidColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isrte_IdNull() {
            return this.IsNull(this.tablertept.rte_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setrte_IdNull() {
            this[this.tablertept.rte_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public linkRow[] GetlinkRows() {
            if ((this.Table.ChildRelations["rtept_link"] == null)) {
                return new linkRow[0];
            }
            else {
                return ((linkRow[])(base.GetChildRows(this.Table.ChildRelations["rtept_link"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public extensionsRow[] GetextensionsRows() {
            if ((this.Table.ChildRelations["rtept_extensions"] == null)) {
                return new extensionsRow[0];
            }
            else {
                return ((extensionsRow[])(base.GetChildRows(this.Table.ChildRelations["rtept_extensions"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class trkRow : global::System.Data.DataRow {
        
        private trkDataTable tabletrk;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal trkRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tabletrk = ((trkDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string name {
            get {
                try {
                    return ((string)(this[this.tabletrk.nameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'trk\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrk.nameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string cmt {
            get {
                try {
                    return ((string)(this[this.tabletrk.cmtColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'cmt\' in table \'trk\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrk.cmtColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string desc {
            get {
                try {
                    return ((string)(this[this.tabletrk.descColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'desc\' in table \'trk\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrk.descColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string src {
            get {
                try {
                    return ((string)(this[this.tabletrk.srcColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'src\' in table \'trk\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrk.srcColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ulong number {
            get {
                try {
                    return ((ulong)(this[this.tabletrk.numberColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'number\' in table \'trk\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrk.numberColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string type {
            get {
                try {
                    return ((string)(this[this.tabletrk.typeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'trk\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrk.typeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int trk_Id {
            get {
                return ((int)(this[this.tabletrk.trk_IdColumn]));
            }
            set {
                this[this.tabletrk.trk_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int gpx_Id {
            get {
                try {
                    return ((int)(this[this.tabletrk.gpx_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'gpx_Id\' in table \'trk\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrk.gpx_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public gpxRow gpxRow {
            get {
                return ((gpxRow)(this.GetParentRow(this.Table.ParentRelations["gpx_trk"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["gpx_trk"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsnameNull() {
            return this.IsNull(this.tabletrk.nameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetnameNull() {
            this[this.tabletrk.nameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IscmtNull() {
            return this.IsNull(this.tabletrk.cmtColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetcmtNull() {
            this[this.tabletrk.cmtColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsdescNull() {
            return this.IsNull(this.tabletrk.descColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetdescNull() {
            this[this.tabletrk.descColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssrcNull() {
            return this.IsNull(this.tabletrk.srcColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsrcNull() {
            this[this.tabletrk.srcColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsnumberNull() {
            return this.IsNull(this.tabletrk.numberColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetnumberNull() {
            this[this.tabletrk.numberColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstypeNull() {
            return this.IsNull(this.tabletrk.typeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettypeNull() {
            this[this.tabletrk.typeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isgpx_IdNull() {
            return this.IsNull(this.tabletrk.gpx_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setgpx_IdNull() {
            this[this.tabletrk.gpx_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public linkRow[] GetlinkRows() {
            if ((this.Table.ChildRelations["trk_link"] == null)) {
                return new linkRow[0];
            }
            else {
                return ((linkRow[])(base.GetChildRows(this.Table.ChildRelations["trk_link"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public extensionsRow[] GetextensionsRows() {
            if ((this.Table.ChildRelations["trk_extensions"] == null)) {
                return new extensionsRow[0];
            }
            else {
                return ((extensionsRow[])(base.GetChildRows(this.Table.ChildRelations["trk_extensions"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trksegRow[] GettrksegRows() {
            if ((this.Table.ChildRelations["trk_trkseg"] == null)) {
                return new trksegRow[0];
            }
            else {
                return ((trksegRow[])(base.GetChildRows(this.Table.ChildRelations["trk_trkseg"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class trksegRow : global::System.Data.DataRow {
        
        private trksegDataTable tabletrkseg;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal trksegRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tabletrkseg = ((trksegDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int trkseg_Id {
            get {
                return ((int)(this[this.tabletrkseg.trkseg_IdColumn]));
            }
            set {
                this[this.tabletrkseg.trkseg_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int trk_Id {
            get {
                try {
                    return ((int)(this[this.tabletrkseg.trk_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'trk_Id\' in table \'trkseg\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkseg.trk_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkRow trkRow {
            get {
                return ((trkRow)(this.GetParentRow(this.Table.ParentRelations["trk_trkseg"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["trk_trkseg"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Istrk_IdNull() {
            return this.IsNull(this.tabletrkseg.trk_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Settrk_IdNull() {
            this[this.tabletrkseg.trk_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkptRow[] GettrkptRows() {
            if ((this.Table.ChildRelations["trkseg_trkpt"] == null)) {
                return new trkptRow[0];
            }
            else {
                return ((trkptRow[])(base.GetChildRows(this.Table.ChildRelations["trkseg_trkpt"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public extensionsRow[] GetextensionsRows() {
            if ((this.Table.ChildRelations["trkseg_extensions"] == null)) {
                return new extensionsRow[0];
            }
            else {
                return ((extensionsRow[])(base.GetChildRows(this.Table.ChildRelations["trkseg_extensions"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class trkptRow : global::System.Data.DataRow {
        
        private trkptDataTable tabletrkpt;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal trkptRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tabletrkpt = ((trkptDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal lat {
            get {
                return ((decimal)(this[this.tabletrkpt.latColumn]));
            }
            set {
                this[this.tabletrkpt.latColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal lon {
            get {
                return ((decimal)(this[this.tabletrkpt.lonColumn]));
            }
            set {
                this[this.tabletrkpt.lonColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal ele {
            get {
                try {
                    return ((decimal)(this[this.tabletrkpt.eleColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ele\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.eleColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime time {
            get {
                try {
                    return ((global::System.DateTime)(this[this.tabletrkpt.timeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'time\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.timeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal magvar {
            get {
                try {
                    return ((decimal)(this[this.tabletrkpt.magvarColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'magvar\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.magvarColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal geoidheight {
            get {
                try {
                    return ((decimal)(this[this.tabletrkpt.geoidheightColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'geoidheight\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.geoidheightColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string name {
            get {
                try {
                    return ((string)(this[this.tabletrkpt.nameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.nameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string cmt {
            get {
                try {
                    return ((string)(this[this.tabletrkpt.cmtColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'cmt\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.cmtColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string desc {
            get {
                try {
                    return ((string)(this[this.tabletrkpt.descColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'desc\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.descColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string src {
            get {
                try {
                    return ((string)(this[this.tabletrkpt.srcColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'src\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.srcColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sym {
            get {
                try {
                    return ((string)(this[this.tabletrkpt.symColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sym\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.symColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string type {
            get {
                try {
                    return ((string)(this[this.tabletrkpt.typeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.typeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string fix {
            get {
                try {
                    return ((string)(this[this.tabletrkpt.fixColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'fix\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.fixColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ulong sat {
            get {
                try {
                    return ((ulong)(this[this.tabletrkpt.satColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sat\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.satColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal hdop {
            get {
                try {
                    return ((decimal)(this[this.tabletrkpt.hdopColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'hdop\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.hdopColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal vdop {
            get {
                try {
                    return ((decimal)(this[this.tabletrkpt.vdopColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'vdop\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.vdopColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal pdop {
            get {
                try {
                    return ((decimal)(this[this.tabletrkpt.pdopColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'pdop\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.pdopColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public decimal ageofdgpsdata {
            get {
                try {
                    return ((decimal)(this[this.tabletrkpt.ageofdgpsdataColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'ageofdgpsdata\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.ageofdgpsdataColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public long dgpsid {
            get {
                try {
                    return ((long)(this[this.tabletrkpt.dgpsidColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'dgpsid\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.dgpsidColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int trkpt_Id {
            get {
                return ((int)(this[this.tabletrkpt.trkpt_IdColumn]));
            }
            set {
                this[this.tabletrkpt.trkpt_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int trkseg_Id {
            get {
                try {
                    return ((int)(this[this.tabletrkpt.trkseg_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'trkseg_Id\' in table \'trkpt\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletrkpt.trkseg_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trksegRow trksegRow {
            get {
                return ((trksegRow)(this.GetParentRow(this.Table.ParentRelations["trkseg_trkpt"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["trkseg_trkpt"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IseleNull() {
            return this.IsNull(this.tabletrkpt.eleColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SeteleNull() {
            this[this.tabletrkpt.eleColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstimeNull() {
            return this.IsNull(this.tabletrkpt.timeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettimeNull() {
            this[this.tabletrkpt.timeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsmagvarNull() {
            return this.IsNull(this.tabletrkpt.magvarColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetmagvarNull() {
            this[this.tabletrkpt.magvarColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsgeoidheightNull() {
            return this.IsNull(this.tabletrkpt.geoidheightColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetgeoidheightNull() {
            this[this.tabletrkpt.geoidheightColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsnameNull() {
            return this.IsNull(this.tabletrkpt.nameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetnameNull() {
            this[this.tabletrkpt.nameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IscmtNull() {
            return this.IsNull(this.tabletrkpt.cmtColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetcmtNull() {
            this[this.tabletrkpt.cmtColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsdescNull() {
            return this.IsNull(this.tabletrkpt.descColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetdescNull() {
            this[this.tabletrkpt.descColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssrcNull() {
            return this.IsNull(this.tabletrkpt.srcColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsrcNull() {
            this[this.tabletrkpt.srcColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssymNull() {
            return this.IsNull(this.tabletrkpt.symColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsymNull() {
            this[this.tabletrkpt.symColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstypeNull() {
            return this.IsNull(this.tabletrkpt.typeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettypeNull() {
            this[this.tabletrkpt.typeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsfixNull() {
            return this.IsNull(this.tabletrkpt.fixColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetfixNull() {
            this[this.tabletrkpt.fixColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssatNull() {
            return this.IsNull(this.tabletrkpt.satColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsatNull() {
            this[this.tabletrkpt.satColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IshdopNull() {
            return this.IsNull(this.tabletrkpt.hdopColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SethdopNull() {
            this[this.tabletrkpt.hdopColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsvdopNull() {
            return this.IsNull(this.tabletrkpt.vdopColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetvdopNull() {
            this[this.tabletrkpt.vdopColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IspdopNull() {
            return this.IsNull(this.tabletrkpt.pdopColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetpdopNull() {
            this[this.tabletrkpt.pdopColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsageofdgpsdataNull() {
            return this.IsNull(this.tabletrkpt.ageofdgpsdataColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetageofdgpsdataNull() {
            this[this.tabletrkpt.ageofdgpsdataColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsdgpsidNull() {
            return this.IsNull(this.tabletrkpt.dgpsidColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetdgpsidNull() {
            this[this.tabletrkpt.dgpsidColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Istrkseg_IdNull() {
            return this.IsNull(this.tabletrkpt.trkseg_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Settrkseg_IdNull() {
            this[this.tabletrkpt.trkseg_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public linkRow[] GetlinkRows() {
            if ((this.Table.ChildRelations["trkpt_link"] == null)) {
                return new linkRow[0];
            }
            else {
                return ((linkRow[])(base.GetChildRows(this.Table.ChildRelations["trkpt_link"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public extensionsRow[] GetextensionsRows() {
            if ((this.Table.ChildRelations["trkpt_extensions"] == null)) {
                return new extensionsRow[0];
            }
            else {
                return ((extensionsRow[])(base.GetChildRows(this.Table.ChildRelations["trkpt_extensions"])));
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class gpxRowChangeEvent : global::System.EventArgs {
        
        private gpxRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public gpxRowChangeEvent(gpxRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public gpxRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class metadataRowChangeEvent : global::System.EventArgs {
        
        private metadataRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public metadataRowChangeEvent(metadataRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public metadataRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class authorRowChangeEvent : global::System.EventArgs {
        
        private authorRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public authorRowChangeEvent(authorRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public authorRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class emailRowChangeEvent : global::System.EventArgs {
        
        private emailRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public emailRowChangeEvent(emailRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public emailRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class linkRowChangeEvent : global::System.EventArgs {
        
        private linkRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public linkRowChangeEvent(linkRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public linkRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class copyrightRowChangeEvent : global::System.EventArgs {
        
        private copyrightRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public copyrightRowChangeEvent(copyrightRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public copyrightRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class boundsRowChangeEvent : global::System.EventArgs {
        
        private boundsRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public boundsRowChangeEvent(boundsRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public boundsRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class extensionsRowChangeEvent : global::System.EventArgs {
        
        private extensionsRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public extensionsRowChangeEvent(extensionsRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public extensionsRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class wptRowChangeEvent : global::System.EventArgs {
        
        private wptRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public wptRowChangeEvent(wptRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public wptRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class rteRowChangeEvent : global::System.EventArgs {
        
        private rteRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteRowChangeEvent(rteRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class rteptRowChangeEvent : global::System.EventArgs {
        
        private rteptRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteptRowChangeEvent(rteptRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public rteptRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class trkRowChangeEvent : global::System.EventArgs {
        
        private trkRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkRowChangeEvent(trkRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class trksegRowChangeEvent : global::System.EventArgs {
        
        private trksegRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trksegRowChangeEvent(trksegRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trksegRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class trkptRowChangeEvent : global::System.EventArgs {
        
        private trkptRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkptRowChangeEvent(trkptRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public trkptRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
